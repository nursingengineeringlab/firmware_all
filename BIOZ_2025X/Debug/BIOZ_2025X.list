
BIOZ_2025X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ee8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004070  08004070  00014070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004090  08004090  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08004090  08004090  00014090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004098  08004098  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004098  08004098  00014098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800409c  0800409c  0001409c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080040a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          00000960  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000984  20000984  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000dab9  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001e6d  00000000  00000000  0002db50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d48  00000000  00000000  0002f9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a71  00000000  00000000  00030708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020541  00000000  00000000  00031179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000ecdc  00000000  00000000  000516ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ccd45  00000000  00000000  00060396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000399c  00000000  00000000  0012d0dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00130a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004058 	.word	0x08004058

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08004058 	.word	0x08004058

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009c8:	f000 b970 	b.w	8000cac <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9e08      	ldr	r6, [sp, #32]
 80009ea:	460d      	mov	r5, r1
 80009ec:	4604      	mov	r4, r0
 80009ee:	460f      	mov	r7, r1
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d14a      	bne.n	8000a8a <__udivmoddi4+0xa6>
 80009f4:	428a      	cmp	r2, r1
 80009f6:	4694      	mov	ip, r2
 80009f8:	d965      	bls.n	8000ac6 <__udivmoddi4+0xe2>
 80009fa:	fab2 f382 	clz	r3, r2
 80009fe:	b143      	cbz	r3, 8000a12 <__udivmoddi4+0x2e>
 8000a00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a04:	f1c3 0220 	rsb	r2, r3, #32
 8000a08:	409f      	lsls	r7, r3
 8000a0a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a0e:	4317      	orrs	r7, r2
 8000a10:	409c      	lsls	r4, r3
 8000a12:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a16:	fa1f f58c 	uxth.w	r5, ip
 8000a1a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a1e:	0c22      	lsrs	r2, r4, #16
 8000a20:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a24:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a28:	fb01 f005 	mul.w	r0, r1, r5
 8000a2c:	4290      	cmp	r0, r2
 8000a2e:	d90a      	bls.n	8000a46 <__udivmoddi4+0x62>
 8000a30:	eb1c 0202 	adds.w	r2, ip, r2
 8000a34:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000a38:	f080 811c 	bcs.w	8000c74 <__udivmoddi4+0x290>
 8000a3c:	4290      	cmp	r0, r2
 8000a3e:	f240 8119 	bls.w	8000c74 <__udivmoddi4+0x290>
 8000a42:	3902      	subs	r1, #2
 8000a44:	4462      	add	r2, ip
 8000a46:	1a12      	subs	r2, r2, r0
 8000a48:	b2a4      	uxth	r4, r4
 8000a4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a52:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a56:	fb00 f505 	mul.w	r5, r0, r5
 8000a5a:	42a5      	cmp	r5, r4
 8000a5c:	d90a      	bls.n	8000a74 <__udivmoddi4+0x90>
 8000a5e:	eb1c 0404 	adds.w	r4, ip, r4
 8000a62:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000a66:	f080 8107 	bcs.w	8000c78 <__udivmoddi4+0x294>
 8000a6a:	42a5      	cmp	r5, r4
 8000a6c:	f240 8104 	bls.w	8000c78 <__udivmoddi4+0x294>
 8000a70:	4464      	add	r4, ip
 8000a72:	3802      	subs	r0, #2
 8000a74:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a78:	1b64      	subs	r4, r4, r5
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	b11e      	cbz	r6, 8000a86 <__udivmoddi4+0xa2>
 8000a7e:	40dc      	lsrs	r4, r3
 8000a80:	2300      	movs	r3, #0
 8000a82:	e9c6 4300 	strd	r4, r3, [r6]
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d908      	bls.n	8000aa0 <__udivmoddi4+0xbc>
 8000a8e:	2e00      	cmp	r6, #0
 8000a90:	f000 80ed 	beq.w	8000c6e <__udivmoddi4+0x28a>
 8000a94:	2100      	movs	r1, #0
 8000a96:	e9c6 0500 	strd	r0, r5, [r6]
 8000a9a:	4608      	mov	r0, r1
 8000a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa0:	fab3 f183 	clz	r1, r3
 8000aa4:	2900      	cmp	r1, #0
 8000aa6:	d149      	bne.n	8000b3c <__udivmoddi4+0x158>
 8000aa8:	42ab      	cmp	r3, r5
 8000aaa:	d302      	bcc.n	8000ab2 <__udivmoddi4+0xce>
 8000aac:	4282      	cmp	r2, r0
 8000aae:	f200 80f8 	bhi.w	8000ca2 <__udivmoddi4+0x2be>
 8000ab2:	1a84      	subs	r4, r0, r2
 8000ab4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ab8:	2001      	movs	r0, #1
 8000aba:	4617      	mov	r7, r2
 8000abc:	2e00      	cmp	r6, #0
 8000abe:	d0e2      	beq.n	8000a86 <__udivmoddi4+0xa2>
 8000ac0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ac4:	e7df      	b.n	8000a86 <__udivmoddi4+0xa2>
 8000ac6:	b902      	cbnz	r2, 8000aca <__udivmoddi4+0xe6>
 8000ac8:	deff      	udf	#255	; 0xff
 8000aca:	fab2 f382 	clz	r3, r2
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	f040 8090 	bne.w	8000bf4 <__udivmoddi4+0x210>
 8000ad4:	1a8a      	subs	r2, r1, r2
 8000ad6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ada:	fa1f fe8c 	uxth.w	lr, ip
 8000ade:	2101      	movs	r1, #1
 8000ae0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ae4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ae8:	0c22      	lsrs	r2, r4, #16
 8000aea:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000aee:	fb0e f005 	mul.w	r0, lr, r5
 8000af2:	4290      	cmp	r0, r2
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0x124>
 8000af6:	eb1c 0202 	adds.w	r2, ip, r2
 8000afa:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x122>
 8000b00:	4290      	cmp	r0, r2
 8000b02:	f200 80cb 	bhi.w	8000c9c <__udivmoddi4+0x2b8>
 8000b06:	4645      	mov	r5, r8
 8000b08:	1a12      	subs	r2, r2, r0
 8000b0a:	b2a4      	uxth	r4, r4
 8000b0c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b10:	fb07 2210 	mls	r2, r7, r0, r2
 8000b14:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b18:	fb0e fe00 	mul.w	lr, lr, r0
 8000b1c:	45a6      	cmp	lr, r4
 8000b1e:	d908      	bls.n	8000b32 <__udivmoddi4+0x14e>
 8000b20:	eb1c 0404 	adds.w	r4, ip, r4
 8000b24:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b28:	d202      	bcs.n	8000b30 <__udivmoddi4+0x14c>
 8000b2a:	45a6      	cmp	lr, r4
 8000b2c:	f200 80bb 	bhi.w	8000ca6 <__udivmoddi4+0x2c2>
 8000b30:	4610      	mov	r0, r2
 8000b32:	eba4 040e 	sub.w	r4, r4, lr
 8000b36:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b3a:	e79f      	b.n	8000a7c <__udivmoddi4+0x98>
 8000b3c:	f1c1 0720 	rsb	r7, r1, #32
 8000b40:	408b      	lsls	r3, r1
 8000b42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b4a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b4e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b52:	40fd      	lsrs	r5, r7
 8000b54:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b58:	4323      	orrs	r3, r4
 8000b5a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b5e:	fa1f fe8c 	uxth.w	lr, ip
 8000b62:	fb09 5518 	mls	r5, r9, r8, r5
 8000b66:	0c1c      	lsrs	r4, r3, #16
 8000b68:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b6c:	fb08 f50e 	mul.w	r5, r8, lr
 8000b70:	42a5      	cmp	r5, r4
 8000b72:	fa02 f201 	lsl.w	r2, r2, r1
 8000b76:	fa00 f001 	lsl.w	r0, r0, r1
 8000b7a:	d90b      	bls.n	8000b94 <__udivmoddi4+0x1b0>
 8000b7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b80:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b84:	f080 8088 	bcs.w	8000c98 <__udivmoddi4+0x2b4>
 8000b88:	42a5      	cmp	r5, r4
 8000b8a:	f240 8085 	bls.w	8000c98 <__udivmoddi4+0x2b4>
 8000b8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b92:	4464      	add	r4, ip
 8000b94:	1b64      	subs	r4, r4, r5
 8000b96:	b29d      	uxth	r5, r3
 8000b98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000ba0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ba4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ba8:	45a6      	cmp	lr, r4
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x1da>
 8000bac:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000bb4:	d26c      	bcs.n	8000c90 <__udivmoddi4+0x2ac>
 8000bb6:	45a6      	cmp	lr, r4
 8000bb8:	d96a      	bls.n	8000c90 <__udivmoddi4+0x2ac>
 8000bba:	3b02      	subs	r3, #2
 8000bbc:	4464      	add	r4, ip
 8000bbe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bc2:	fba3 9502 	umull	r9, r5, r3, r2
 8000bc6:	eba4 040e 	sub.w	r4, r4, lr
 8000bca:	42ac      	cmp	r4, r5
 8000bcc:	46c8      	mov	r8, r9
 8000bce:	46ae      	mov	lr, r5
 8000bd0:	d356      	bcc.n	8000c80 <__udivmoddi4+0x29c>
 8000bd2:	d053      	beq.n	8000c7c <__udivmoddi4+0x298>
 8000bd4:	b156      	cbz	r6, 8000bec <__udivmoddi4+0x208>
 8000bd6:	ebb0 0208 	subs.w	r2, r0, r8
 8000bda:	eb64 040e 	sbc.w	r4, r4, lr
 8000bde:	fa04 f707 	lsl.w	r7, r4, r7
 8000be2:	40ca      	lsrs	r2, r1
 8000be4:	40cc      	lsrs	r4, r1
 8000be6:	4317      	orrs	r7, r2
 8000be8:	e9c6 7400 	strd	r7, r4, [r6]
 8000bec:	4618      	mov	r0, r3
 8000bee:	2100      	movs	r1, #0
 8000bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf4:	f1c3 0120 	rsb	r1, r3, #32
 8000bf8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bfc:	fa20 f201 	lsr.w	r2, r0, r1
 8000c00:	fa25 f101 	lsr.w	r1, r5, r1
 8000c04:	409d      	lsls	r5, r3
 8000c06:	432a      	orrs	r2, r5
 8000c08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c14:	fb07 1510 	mls	r5, r7, r0, r1
 8000c18:	0c11      	lsrs	r1, r2, #16
 8000c1a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c1e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c22:	428d      	cmp	r5, r1
 8000c24:	fa04 f403 	lsl.w	r4, r4, r3
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0x258>
 8000c2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c2e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c32:	d22f      	bcs.n	8000c94 <__udivmoddi4+0x2b0>
 8000c34:	428d      	cmp	r5, r1
 8000c36:	d92d      	bls.n	8000c94 <__udivmoddi4+0x2b0>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1b49      	subs	r1, r1, r5
 8000c3e:	b292      	uxth	r2, r2
 8000c40:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c44:	fb07 1115 	mls	r1, r7, r5, r1
 8000c48:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c4c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c50:	4291      	cmp	r1, r2
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x282>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c5c:	d216      	bcs.n	8000c8c <__udivmoddi4+0x2a8>
 8000c5e:	4291      	cmp	r1, r2
 8000c60:	d914      	bls.n	8000c8c <__udivmoddi4+0x2a8>
 8000c62:	3d02      	subs	r5, #2
 8000c64:	4462      	add	r2, ip
 8000c66:	1a52      	subs	r2, r2, r1
 8000c68:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c6c:	e738      	b.n	8000ae0 <__udivmoddi4+0xfc>
 8000c6e:	4631      	mov	r1, r6
 8000c70:	4630      	mov	r0, r6
 8000c72:	e708      	b.n	8000a86 <__udivmoddi4+0xa2>
 8000c74:	4639      	mov	r1, r7
 8000c76:	e6e6      	b.n	8000a46 <__udivmoddi4+0x62>
 8000c78:	4610      	mov	r0, r2
 8000c7a:	e6fb      	b.n	8000a74 <__udivmoddi4+0x90>
 8000c7c:	4548      	cmp	r0, r9
 8000c7e:	d2a9      	bcs.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c80:	ebb9 0802 	subs.w	r8, r9, r2
 8000c84:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	e7a3      	b.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c8c:	4645      	mov	r5, r8
 8000c8e:	e7ea      	b.n	8000c66 <__udivmoddi4+0x282>
 8000c90:	462b      	mov	r3, r5
 8000c92:	e794      	b.n	8000bbe <__udivmoddi4+0x1da>
 8000c94:	4640      	mov	r0, r8
 8000c96:	e7d1      	b.n	8000c3c <__udivmoddi4+0x258>
 8000c98:	46d0      	mov	r8, sl
 8000c9a:	e77b      	b.n	8000b94 <__udivmoddi4+0x1b0>
 8000c9c:	3d02      	subs	r5, #2
 8000c9e:	4462      	add	r2, ip
 8000ca0:	e732      	b.n	8000b08 <__udivmoddi4+0x124>
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e70a      	b.n	8000abc <__udivmoddi4+0xd8>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	e742      	b.n	8000b32 <__udivmoddi4+0x14e>

08000cac <__aeabi_idiv0>:
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <tfr_byte>:
void tfr_byte(uint8_t data);
void sendFrequency(double frequency);

// transfer a byte a bit at a time LSB first to DATA
void tfr_byte(uint8_t data)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
  for (int i=0; i<8; i++, data>>=1) {
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	e01a      	b.n	8000cf6 <tfr_byte+0x46>
    HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, data & 0x01);
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	461a      	mov	r2, r3
 8000cca:	2180      	movs	r1, #128	; 0x80
 8000ccc:	480e      	ldr	r0, [pc, #56]	; (8000d08 <tfr_byte+0x58>)
 8000cce:	f001 ff89 	bl	8002be4 <HAL_GPIO_WritePin>
    pulseHigh(W_CLK);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cd8:	480c      	ldr	r0, [pc, #48]	; (8000d0c <tfr_byte+0x5c>)
 8000cda:	f001 ff83 	bl	8002be4 <HAL_GPIO_WritePin>
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ce4:	4809      	ldr	r0, [pc, #36]	; (8000d0c <tfr_byte+0x5c>)
 8000ce6:	f001 ff7d 	bl	8002be4 <HAL_GPIO_WritePin>
  for (int i=0; i<8; i++, data>>=1) {
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	3301      	adds	r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	085b      	lsrs	r3, r3, #1
 8000cf4:	71fb      	strb	r3, [r7, #7]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	2b07      	cmp	r3, #7
 8000cfa:	dde1      	ble.n	8000cc0 <tfr_byte+0x10>
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40020800 	.word	0x40020800
 8000d0c:	40020400 	.word	0x40020400

08000d10 <sendFrequency>:

// frequency of signwave (datasheet page 12) will be:
//   <sys clock> * <frequency tuning word> / 2^32
void sendFrequency(double frequency) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	ed87 0b00 	vstr	d0, [r7]
//  int32_t freq = frequency * 4294967296.0 / 180000 000;
  int32_t freq = frequency * 4294967296.0 / 180000000;
 8000d1a:	f04f 0200 	mov.w	r2, #0
 8000d1e:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <sendFrequency+0x90>)
 8000d20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000d24:	f7ff fc0c 	bl	8000540 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4610      	mov	r0, r2
 8000d2e:	4619      	mov	r1, r3
 8000d30:	a319      	add	r3, pc, #100	; (adr r3, 8000d98 <sendFrequency+0x88>)
 8000d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d36:	f7ff fd2d 	bl	8000794 <__aeabi_ddiv>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	4610      	mov	r0, r2
 8000d40:	4619      	mov	r1, r3
 8000d42:	f7ff fe0f 	bl	8000964 <__aeabi_d2iz>
 8000d46:	4603      	mov	r3, r0
 8000d48:	60fb      	str	r3, [r7, #12]
  for (int b=0; b<4; b++, freq>>=8) {
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	e00a      	b.n	8000d66 <sendFrequency+0x56>
    tfr_byte(freq & 0xFF);
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ffab 	bl	8000cb0 <tfr_byte>
  for (int b=0; b<4; b++, freq>>=8) {
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	121b      	asrs	r3, r3, #8
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	ddf1      	ble.n	8000d50 <sendFrequency+0x40>
  }
  tfr_byte(0x81);  // = 0x81: PLL ON + LSB-first mode
 8000d6c:	2081      	movs	r0, #129	; 0x81
 8000d6e:	f7ff ff9f 	bl	8000cb0 <tfr_byte>
  pulseHigh(FQ_UD);
 8000d72:	2201      	movs	r2, #1
 8000d74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d78:	480a      	ldr	r0, [pc, #40]	; (8000da4 <sendFrequency+0x94>)
 8000d7a:	f001 ff33 	bl	8002be4 <HAL_GPIO_WritePin>
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d84:	4807      	ldr	r0, [pc, #28]	; (8000da4 <sendFrequency+0x94>)
 8000d86:	f001 ff2d 	bl	8002be4 <HAL_GPIO_WritePin>
}
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	f3af 8000 	nop.w
 8000d98:	00000000 	.word	0x00000000
 8000d9c:	41a5752a 	.word	0x41a5752a
 8000da0:	41f00000 	.word	0x41f00000
 8000da4:	40020400 	.word	0x40020400

08000da8 <setup_mux>:
    while (__HAL_TIM_GET_COUNTER(&htim2) < us); // Wait until counter reaches 'us'
}



void setup_mux(void){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0

	//	  T26 with T32
	//	  T23 with T29

	// T23, LC+_1 X1Y1
	HAL_GPIO_WritePin(GPIOB, mux_i_a_Pin, GPIO_PIN_SET);
 8000dac:	2201      	movs	r2, #1
 8000dae:	2101      	movs	r1, #1
 8000db0:	480a      	ldr	r0, [pc, #40]	; (8000ddc <setup_mux+0x34>)
 8000db2:	f001 ff17 	bl	8002be4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, mux_i_b_Pin, GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2102      	movs	r1, #2
 8000dba:	4808      	ldr	r0, [pc, #32]	; (8000ddc <setup_mux+0x34>)
 8000dbc:	f001 ff12 	bl	8002be4 <HAL_GPIO_WritePin>

	// T26-HV+1,  T32-LV-1   A-HIGH, B-LOW,  X1Y1
	HAL_GPIO_WritePin(mux_v_a_GPIO_Port, mux_v_a_Pin, GPIO_PIN_SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc6:	4806      	ldr	r0, [pc, #24]	; (8000de0 <setup_mux+0x38>)
 8000dc8:	f001 ff0c 	bl	8002be4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(mux_v_b_GPIO_Port, mux_v_b_Pin, GPIO_PIN_RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dd2:	4804      	ldr	r0, [pc, #16]	; (8000de4 <setup_mux+0x3c>)
 8000dd4:	f001 ff06 	bl	8002be4 <HAL_GPIO_WritePin>

	// write code to

}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40020400 	.word	0x40020400
 8000de0:	40020800 	.word	0x40020800
 8000de4:	40020000 	.word	0x40020000

08000de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dec:	f000 fc3e 	bl	800166c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df0:	f000 f8a0 	bl	8000f34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df4:	f000 f9f2 	bl	80011dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000df8:	f000 f9d0 	bl	800119c <MX_DMA_Init>
  MX_ADC1_Init();
 8000dfc:	f000 f904 	bl	8001008 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000e00:	f000 f956 	bl	80010b0 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000e04:	f000 f9a0 	bl	8001148 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	setup_mux();
 8000e08:	f7ff ffce 	bl	8000da8 <setup_mux>


	pulseHigh(DATA);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	2180      	movs	r1, #128	; 0x80
 8000e10:	483d      	ldr	r0, [pc, #244]	; (8000f08 <main+0x120>)
 8000e12:	f001 fee7 	bl	8002be4 <HAL_GPIO_WritePin>
 8000e16:	2200      	movs	r2, #0
 8000e18:	2180      	movs	r1, #128	; 0x80
 8000e1a:	483b      	ldr	r0, [pc, #236]	; (8000f08 <main+0x120>)
 8000e1c:	f001 fee2 	bl	8002be4 <HAL_GPIO_WritePin>
	pulseHigh(RESET);
 8000e20:	2201      	movs	r2, #1
 8000e22:	2140      	movs	r1, #64	; 0x40
 8000e24:	4838      	ldr	r0, [pc, #224]	; (8000f08 <main+0x120>)
 8000e26:	f001 fedd 	bl	8002be4 <HAL_GPIO_WritePin>
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2140      	movs	r1, #64	; 0x40
 8000e2e:	4836      	ldr	r0, [pc, #216]	; (8000f08 <main+0x120>)
 8000e30:	f001 fed8 	bl	8002be4 <HAL_GPIO_WritePin>
	pulseHigh(W_CLK);
 8000e34:	2201      	movs	r2, #1
 8000e36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e3a:	4834      	ldr	r0, [pc, #208]	; (8000f0c <main+0x124>)
 8000e3c:	f001 fed2 	bl	8002be4 <HAL_GPIO_WritePin>
 8000e40:	2200      	movs	r2, #0
 8000e42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e46:	4831      	ldr	r0, [pc, #196]	; (8000f0c <main+0x124>)
 8000e48:	f001 fecc 	bl	8002be4 <HAL_GPIO_WritePin>
	pulseHigh(FQ_UD);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e52:	482e      	ldr	r0, [pc, #184]	; (8000f0c <main+0x124>)
 8000e54:	f001 fec6 	bl	8002be4 <HAL_GPIO_WritePin>
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e5e:	482b      	ldr	r0, [pc, #172]	; (8000f0c <main+0x124>)
 8000e60:	f001 fec0 	bl	8002be4 <HAL_GPIO_WritePin>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buff, ADC_BUFF_LEN);
 8000e64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e68:	4929      	ldr	r1, [pc, #164]	; (8000f10 <main+0x128>)
 8000e6a:	482a      	ldr	r0, [pc, #168]	; (8000f14 <main+0x12c>)
 8000e6c:	f000 fcd8 	bl	8001820 <HAL_ADC_Start_DMA>
//	for(int i=0; i<100; i++){
//		sendFrequency(arr[i]);
//		HAL_Delay(90);// 100
//	}

	sendFrequency(1000000);
 8000e70:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8000f00 <main+0x118>
 8000e74:	f7ff ff4c 	bl	8000d10 <sendFrequency>
	HAL_Delay(90);// 100
 8000e78:	205a      	movs	r0, #90	; 0x5a
 8000e7a:	f000 fc69 	bl	8001750 <HAL_Delay>


	//Freq Sweeping Parameters (10 KHz to 100 KHz)
	for(freq=start_freq_2; freq<=stop_freq_2; freq += freq_step_2)
 8000e7e:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <main+0x130>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a26      	ldr	r2, [pc, #152]	; (8000f1c <main+0x134>)
 8000e84:	6013      	str	r3, [r2, #0]
 8000e86:	e014      	b.n	8000eb2 <main+0xca>
	{
		sendFrequency(freq);
 8000e88:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <main+0x134>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fadd 	bl	800044c <__aeabi_ui2d>
 8000e92:	4602      	mov	r2, r0
 8000e94:	460b      	mov	r3, r1
 8000e96:	ec43 2b10 	vmov	d0, r2, r3
 8000e9a:	f7ff ff39 	bl	8000d10 <sendFrequency>
		HAL_Delay(100);// 100 mS delay
 8000e9e:	2064      	movs	r0, #100	; 0x64
 8000ea0:	f000 fc56 	bl	8001750 <HAL_Delay>
	for(freq=start_freq_2; freq<=stop_freq_2; freq += freq_step_2)
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <main+0x134>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <main+0x138>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4413      	add	r3, r2
 8000eae:	4a1b      	ldr	r2, [pc, #108]	; (8000f1c <main+0x134>)
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <main+0x134>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <main+0x13c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d9e4      	bls.n	8000e88 <main+0xa0>
	}


//	Freq Sweeping Parameters (10 KHz to 100 KHz)
	for(freq=start_freq_3; freq<=stop_freq_3; freq += freq_step_3)
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <main+0x140>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a16      	ldr	r2, [pc, #88]	; (8000f1c <main+0x134>)
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	e014      	b.n	8000ef2 <main+0x10a>
	{
		sendFrequency(freq);
 8000ec8:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <main+0x134>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fabd 	bl	800044c <__aeabi_ui2d>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	ec43 2b10 	vmov	d0, r2, r3
 8000eda:	f7ff ff19 	bl	8000d10 <sendFrequency>
		HAL_Delay(100);// 100 mS delay
 8000ede:	2064      	movs	r0, #100	; 0x64
 8000ee0:	f000 fc36 	bl	8001750 <HAL_Delay>
	for(freq=start_freq_3; freq<=stop_freq_3; freq += freq_step_3)
 8000ee4:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <main+0x134>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <main+0x144>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4413      	add	r3, r2
 8000eee:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <main+0x134>)
 8000ef0:	6013      	str	r3, [r2, #0]
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <main+0x134>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <main+0x148>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d9e4      	bls.n	8000ec8 <main+0xe0>
	sendFrequency(1000000);
 8000efe:	e7b7      	b.n	8000e70 <main+0x88>
 8000f00:	00000000 	.word	0x00000000
 8000f04:	412e8480 	.word	0x412e8480
 8000f08:	40020800 	.word	0x40020800
 8000f0c:	40020400 	.word	0x40020400
 8000f10:	20000180 	.word	0x20000180
 8000f14:	20000040 	.word	0x20000040
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	20000178 	.word	0x20000178
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000004 	.word	0x20000004
 8000f28:	2000000c 	.word	0x2000000c
 8000f2c:	20000014 	.word	0x20000014
 8000f30:	20000010 	.word	0x20000010

08000f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b094      	sub	sp, #80	; 0x50
 8000f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3a:	f107 0320 	add.w	r3, r7, #32
 8000f3e:	2230      	movs	r2, #48	; 0x30
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f003 f85c 	bl	8004000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	4b28      	ldr	r3, [pc, #160]	; (8001000 <SystemClock_Config+0xcc>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	4a27      	ldr	r2, [pc, #156]	; (8001000 <SystemClock_Config+0xcc>)
 8000f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f66:	6413      	str	r3, [r2, #64]	; 0x40
 8000f68:	4b25      	ldr	r3, [pc, #148]	; (8001000 <SystemClock_Config+0xcc>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f74:	2300      	movs	r3, #0
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	4b22      	ldr	r3, [pc, #136]	; (8001004 <SystemClock_Config+0xd0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a21      	ldr	r2, [pc, #132]	; (8001004 <SystemClock_Config+0xd0>)
 8000f7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <SystemClock_Config+0xd0>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f90:	2302      	movs	r3, #2
 8000f92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f94:	2301      	movs	r3, #1
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f98:	2310      	movs	r3, #16
 8000f9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fa4:	2308      	movs	r3, #8
 8000fa6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fa8:	23a8      	movs	r3, #168	; 0xa8
 8000faa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fac:	2302      	movs	r3, #2
 8000fae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fb0:	2304      	movs	r3, #4
 8000fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb4:	f107 0320 	add.w	r3, r7, #32
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f001 fe2d 	bl	8002c18 <HAL_RCC_OscConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fc4:	f000 f9d4 	bl	8001370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc8:	230f      	movs	r3, #15
 8000fca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fd4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fde:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	2105      	movs	r1, #5
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f002 f88e 	bl	8003108 <HAL_RCC_ClockConfig>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ff2:	f000 f9bd 	bl	8001370 <Error_Handler>
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	3750      	adds	r7, #80	; 0x50
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800
 8001004:	40007000 	.word	0x40007000

08001008 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800100e:	463b      	mov	r3, r7
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800101a:	4b22      	ldr	r3, [pc, #136]	; (80010a4 <MX_ADC1_Init+0x9c>)
 800101c:	4a22      	ldr	r2, [pc, #136]	; (80010a8 <MX_ADC1_Init+0xa0>)
 800101e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001020:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <MX_ADC1_Init+0x9c>)
 8001022:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001026:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001028:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <MX_ADC1_Init+0x9c>)
 800102a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800102e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001030:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <MX_ADC1_Init+0x9c>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <MX_ADC1_Init+0x9c>)
 8001038:	2201      	movs	r2, #1
 800103a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <MX_ADC1_Init+0x9c>)
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <MX_ADC1_Init+0x9c>)
 8001046:	2200      	movs	r2, #0
 8001048:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_ADC1_Init+0x9c>)
 800104c:	4a17      	ldr	r2, [pc, #92]	; (80010ac <MX_ADC1_Init+0xa4>)
 800104e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_ADC1_Init+0x9c>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_ADC1_Init+0x9c>)
 8001058:	2201      	movs	r2, #1
 800105a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_ADC1_Init+0x9c>)
 800105e:	2201      	movs	r2, #1
 8001060:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_ADC1_Init+0x9c>)
 8001066:	2200      	movs	r2, #0
 8001068:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800106a:	480e      	ldr	r0, [pc, #56]	; (80010a4 <MX_ADC1_Init+0x9c>)
 800106c:	f000 fb94 	bl	8001798 <HAL_ADC_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001076:	f000 f97b 	bl	8001370 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800107a:	2305      	movs	r3, #5
 800107c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800107e:	2301      	movs	r3, #1
 8001080:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <MX_ADC1_Init+0x9c>)
 800108c:	f000 fcec 	bl	8001a68 <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001096:	f000 f96b 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000040 	.word	0x20000040
 80010a8:	40012000 	.word	0x40012000
 80010ac:	0f000001 	.word	0x0f000001

080010b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b6:	f107 0308 	add.w	r3, r7, #8
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c4:	463b      	mov	r3, r7
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010cc:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <MX_TIM2_Init+0x94>)
 80010ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 68-1;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <MX_TIM2_Init+0x94>)
 80010d6:	2243      	movs	r2, #67	; 0x43
 80010d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010da:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <MX_TIM2_Init+0x94>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <MX_TIM2_Init+0x94>)
 80010e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <MX_TIM2_Init+0x94>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <MX_TIM2_Init+0x94>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010f4:	4813      	ldr	r0, [pc, #76]	; (8001144 <MX_TIM2_Init+0x94>)
 80010f6:	f002 f9e7 	bl	80034c8 <HAL_TIM_Base_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001100:	f000 f936 	bl	8001370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001108:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	4619      	mov	r1, r3
 8001110:	480c      	ldr	r0, [pc, #48]	; (8001144 <MX_TIM2_Init+0x94>)
 8001112:	f002 fa28 	bl	8003566 <HAL_TIM_ConfigClockSource>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800111c:	f000 f928 	bl	8001370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001120:	2300      	movs	r3, #0
 8001122:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001128:	463b      	mov	r3, r7
 800112a:	4619      	mov	r1, r3
 800112c:	4805      	ldr	r0, [pc, #20]	; (8001144 <MX_TIM2_Init+0x94>)
 800112e:	f002 fc27 	bl	8003980 <HAL_TIMEx_MasterConfigSynchronization>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001138:	f000 f91a 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800113c:	bf00      	nop
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200000e8 	.word	0x200000e8

08001148 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <MX_USART3_UART_Init+0x4c>)
 800114e:	4a12      	ldr	r2, [pc, #72]	; (8001198 <MX_USART3_UART_Init+0x50>)
 8001150:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <MX_USART3_UART_Init+0x4c>)
 8001154:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001158:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_USART3_UART_Init+0x4c>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_USART3_UART_Init+0x4c>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <MX_USART3_UART_Init+0x4c>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_USART3_UART_Init+0x4c>)
 800116e:	220c      	movs	r2, #12
 8001170:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <MX_USART3_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <MX_USART3_UART_Init+0x4c>)
 800117a:	2200      	movs	r2, #0
 800117c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_USART3_UART_Init+0x4c>)
 8001180:	f002 fc7a 	bl	8003a78 <HAL_UART_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800118a:	f000 f8f1 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000130 	.word	0x20000130
 8001198:	40004800 	.word	0x40004800

0800119c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <MX_DMA_Init+0x3c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a0b      	ldr	r2, [pc, #44]	; (80011d8 <MX_DMA_Init+0x3c>)
 80011ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <MX_DMA_Init+0x3c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2038      	movs	r0, #56	; 0x38
 80011c4:	f000 ffcb 	bl	800215e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011c8:	2038      	movs	r0, #56	; 0x38
 80011ca:	f000 ffe4 	bl	8002196 <HAL_NVIC_EnableIRQ>

}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800

080011dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	4b52      	ldr	r3, [pc, #328]	; (8001340 <MX_GPIO_Init+0x164>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a51      	ldr	r2, [pc, #324]	; (8001340 <MX_GPIO_Init+0x164>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b4f      	ldr	r3, [pc, #316]	; (8001340 <MX_GPIO_Init+0x164>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b4b      	ldr	r3, [pc, #300]	; (8001340 <MX_GPIO_Init+0x164>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a4a      	ldr	r2, [pc, #296]	; (8001340 <MX_GPIO_Init+0x164>)
 8001218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b48      	ldr	r3, [pc, #288]	; (8001340 <MX_GPIO_Init+0x164>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	4b44      	ldr	r3, [pc, #272]	; (8001340 <MX_GPIO_Init+0x164>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a43      	ldr	r2, [pc, #268]	; (8001340 <MX_GPIO_Init+0x164>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b41      	ldr	r3, [pc, #260]	; (8001340 <MX_GPIO_Init+0x164>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	4b3d      	ldr	r3, [pc, #244]	; (8001340 <MX_GPIO_Init+0x164>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a3c      	ldr	r2, [pc, #240]	; (8001340 <MX_GPIO_Init+0x164>)
 8001250:	f043 0302 	orr.w	r3, r3, #2
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b3a      	ldr	r3, [pc, #232]	; (8001340 <MX_GPIO_Init+0x164>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, mux_i_a_Pin|mux_i_b_Pin|FQ_UD_Pin|W_CLK_Pin, GPIO_PIN_SET);
 8001262:	2201      	movs	r2, #1
 8001264:	f240 3103 	movw	r1, #771	; 0x303
 8001268:	4836      	ldr	r0, [pc, #216]	; (8001344 <MX_GPIO_Init+0x168>)
 800126a:	f001 fcbb 	bl	8002be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RESET_Pin|DATA_Pin|mux_v_a_Pin, GPIO_PIN_SET);
 800126e:	2201      	movs	r2, #1
 8001270:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8001274:	4834      	ldr	r0, [pc, #208]	; (8001348 <MX_GPIO_Init+0x16c>)
 8001276:	f001 fcb5 	bl	8002be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(mux_v_b_GPIO_Port, mux_v_b_Pin, GPIO_PIN_SET);
 800127a:	2201      	movs	r2, #1
 800127c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001280:	4832      	ldr	r0, [pc, #200]	; (800134c <MX_GPIO_Init+0x170>)
 8001282:	f001 fcaf 	bl	8002be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : mux_i_a_Pin mux_i_b_Pin */
  GPIO_InitStruct.Pin = mux_i_a_Pin|mux_i_b_Pin;
 8001286:	2303      	movs	r3, #3
 8001288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128a:	2301      	movs	r3, #1
 800128c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001292:	2301      	movs	r3, #1
 8001294:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	4829      	ldr	r0, [pc, #164]	; (8001344 <MX_GPIO_Init+0x168>)
 800129e:	f001 fb05 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin DATA_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|DATA_Pin;
 80012a2:	23c0      	movs	r3, #192	; 0xc0
 80012a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a6:	2301      	movs	r3, #1
 80012a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ae:	2302      	movs	r3, #2
 80012b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4619      	mov	r1, r3
 80012b8:	4823      	ldr	r0, [pc, #140]	; (8001348 <MX_GPIO_Init+0x16c>)
 80012ba:	f001 faf7 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pin : mux_v_a_Pin */
  GPIO_InitStruct.Pin = mux_v_a_Pin;
 80012be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c4:	2301      	movs	r3, #1
 80012c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80012cc:	2301      	movs	r3, #1
 80012ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mux_v_a_GPIO_Port, &GPIO_InitStruct);
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4619      	mov	r1, r3
 80012d6:	481c      	ldr	r0, [pc, #112]	; (8001348 <MX_GPIO_Init+0x16c>)
 80012d8:	f001 fae8 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pin : mux_v_b_Pin */
  GPIO_InitStruct.Pin = mux_v_b_Pin;
 80012dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80012ea:	2301      	movs	r3, #1
 80012ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mux_v_b_GPIO_Port, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	4815      	ldr	r0, [pc, #84]	; (800134c <MX_GPIO_Init+0x170>)
 80012f6:	f001 fad9 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pin : FQ_UD_Pin */
  GPIO_InitStruct.Pin = FQ_UD_Pin;
 80012fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001300:	2301      	movs	r3, #1
 8001302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001304:	2301      	movs	r3, #1
 8001306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001308:	2302      	movs	r3, #2
 800130a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FQ_UD_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	480c      	ldr	r0, [pc, #48]	; (8001344 <MX_GPIO_Init+0x168>)
 8001314:	f001 faca 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pin : W_CLK_Pin */
  GPIO_InitStruct.Pin = W_CLK_Pin;
 8001318:	f44f 7300 	mov.w	r3, #512	; 0x200
 800131c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131e:	2301      	movs	r3, #1
 8001320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001322:	2301      	movs	r3, #1
 8001324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(W_CLK_GPIO_Port, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	4804      	ldr	r0, [pc, #16]	; (8001344 <MX_GPIO_Init+0x168>)
 8001332:	f001 fabb 	bl	80028ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001336:	bf00      	nop
 8001338:	3728      	adds	r7, #40	; 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800
 8001344:	40020400 	.word	0x40020400
 8001348:	40020800 	.word	0x40020800
 800134c:	40020000 	.word	0x40020000

08001350 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

	  data_ready_flag = 1;
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <HAL_ADC_ConvCpltCallback+0x1c>)
 800135a:	2201      	movs	r2, #1
 800135c:	701a      	strb	r2, [r3, #0]
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	2000017c 	.word	0x2000017c

08001370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
}
 8001376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001378:	e7fe      	b.n	8001378 <Error_Handler+0x8>
	...

0800137c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <HAL_MspInit+0x4c>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	4a0f      	ldr	r2, [pc, #60]	; (80013c8 <HAL_MspInit+0x4c>)
 800138c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001390:	6453      	str	r3, [r2, #68]	; 0x44
 8001392:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <HAL_MspInit+0x4c>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_MspInit+0x4c>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	4a08      	ldr	r2, [pc, #32]	; (80013c8 <HAL_MspInit+0x4c>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_MspInit+0x4c>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800

080013cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	; 0x28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a2f      	ldr	r2, [pc, #188]	; (80014a8 <HAL_ADC_MspInit+0xdc>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d158      	bne.n	80014a0 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	4b2e      	ldr	r3, [pc, #184]	; (80014ac <HAL_ADC_MspInit+0xe0>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	4a2d      	ldr	r2, [pc, #180]	; (80014ac <HAL_ADC_MspInit+0xe0>)
 80013f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fc:	6453      	str	r3, [r2, #68]	; 0x44
 80013fe:	4b2b      	ldr	r3, [pc, #172]	; (80014ac <HAL_ADC_MspInit+0xe0>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b27      	ldr	r3, [pc, #156]	; (80014ac <HAL_ADC_MspInit+0xe0>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a26      	ldr	r2, [pc, #152]	; (80014ac <HAL_ADC_MspInit+0xe0>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b24      	ldr	r3, [pc, #144]	; (80014ac <HAL_ADC_MspInit+0xe0>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001426:	2320      	movs	r3, #32
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142a:	2303      	movs	r3, #3
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	481d      	ldr	r0, [pc, #116]	; (80014b0 <HAL_ADC_MspInit+0xe4>)
 800143a:	f001 fa37 	bl	80028ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800143e:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001440:	4a1d      	ldr	r2, [pc, #116]	; (80014b8 <HAL_ADC_MspInit+0xec>)
 8001442:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001444:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001446:	2200      	movs	r2, #0
 8001448:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800144a:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001450:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001456:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001458:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800145c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001460:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001464:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001468:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800146c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001470:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001474:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001478:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800147c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800147e:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001480:	2200      	movs	r2, #0
 8001482:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001484:	480b      	ldr	r0, [pc, #44]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001486:	f000 fea1 	bl	80021cc <HAL_DMA_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001490:	f7ff ff6e 	bl	8001370 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001498:	639a      	str	r2, [r3, #56]	; 0x38
 800149a:	4a06      	ldr	r2, [pc, #24]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014a0:	bf00      	nop
 80014a2:	3728      	adds	r7, #40	; 0x28
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40012000 	.word	0x40012000
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40020000 	.word	0x40020000
 80014b4:	20000088 	.word	0x20000088
 80014b8:	40026410 	.word	0x40026410

080014bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014cc:	d10d      	bne.n	80014ea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <HAL_TIM_Base_MspInit+0x3c>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	4a08      	ldr	r2, [pc, #32]	; (80014f8 <HAL_TIM_Base_MspInit+0x3c>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6413      	str	r3, [r2, #64]	; 0x40
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_TIM_Base_MspInit+0x3c>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014ea:	bf00      	nop
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800

080014fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a19      	ldr	r2, [pc, #100]	; (8001580 <HAL_UART_MspInit+0x84>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d12c      	bne.n	8001578 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	4b18      	ldr	r3, [pc, #96]	; (8001584 <HAL_UART_MspInit+0x88>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	4a17      	ldr	r2, [pc, #92]	; (8001584 <HAL_UART_MspInit+0x88>)
 8001528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800152c:	6413      	str	r3, [r2, #64]	; 0x40
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <HAL_UART_MspInit+0x88>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <HAL_UART_MspInit+0x88>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a10      	ldr	r2, [pc, #64]	; (8001584 <HAL_UART_MspInit+0x88>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <HAL_UART_MspInit+0x88>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001556:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800155a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001568:	2307      	movs	r3, #7
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <HAL_UART_MspInit+0x8c>)
 8001574:	f001 f99a 	bl	80028ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001578:	bf00      	nop
 800157a:	3728      	adds	r7, #40	; 0x28
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40004800 	.word	0x40004800
 8001584:	40023800 	.word	0x40023800
 8001588:	40020400 	.word	0x40020400

0800158c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001590:	e7fe      	b.n	8001590 <NMI_Handler+0x4>

08001592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <HardFault_Handler+0x4>

08001598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800159c:	e7fe      	b.n	800159c <MemManage_Handler+0x4>

0800159e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <BusFault_Handler+0x4>

080015a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <UsageFault_Handler+0x4>

080015aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d8:	f000 f89a 	bl	8001710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}

080015e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <DMA2_Stream0_IRQHandler+0x10>)
 80015e6:	f000 fef7 	bl	80023d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000088 	.word	0x20000088

080015f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <SystemInit+0x20>)
 80015fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015fe:	4a05      	ldr	r2, [pc, #20]	; (8001614 <SystemInit+0x20>)
 8001600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001604:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001650 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800161c:	f7ff ffea 	bl	80015f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001620:	480c      	ldr	r0, [pc, #48]	; (8001654 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001622:	490d      	ldr	r1, [pc, #52]	; (8001658 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001624:	4a0d      	ldr	r2, [pc, #52]	; (800165c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001628:	e002      	b.n	8001630 <LoopCopyDataInit>

0800162a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800162a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800162c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162e:	3304      	adds	r3, #4

08001630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001634:	d3f9      	bcc.n	800162a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001636:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001638:	4c0a      	ldr	r4, [pc, #40]	; (8001664 <LoopFillZerobss+0x22>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800163c:	e001      	b.n	8001642 <LoopFillZerobss>

0800163e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001640:	3204      	adds	r2, #4

08001642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001644:	d3fb      	bcc.n	800163e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001646:	f002 fce3 	bl	8004010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800164a:	f7ff fbcd 	bl	8000de8 <main>
  bx  lr    
 800164e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001650:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001658:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 800165c:	080040a0 	.word	0x080040a0
  ldr r2, =_sbss
 8001660:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001664:	20000984 	.word	0x20000984

08001668 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001668:	e7fe      	b.n	8001668 <ADC_IRQHandler>
	...

0800166c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <HAL_Init+0x40>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0d      	ldr	r2, [pc, #52]	; (80016ac <HAL_Init+0x40>)
 8001676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800167a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <HAL_Init+0x40>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <HAL_Init+0x40>)
 8001682:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001686:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <HAL_Init+0x40>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a07      	ldr	r2, [pc, #28]	; (80016ac <HAL_Init+0x40>)
 800168e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001692:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001694:	2003      	movs	r0, #3
 8001696:	f000 fd57 	bl	8002148 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800169a:	200f      	movs	r0, #15
 800169c:	f000 f808 	bl	80016b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a0:	f7ff fe6c 	bl	800137c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40023c00 	.word	0x40023c00

080016b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_InitTick+0x54>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_InitTick+0x58>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 fd6f 	bl	80021b2 <HAL_SYSTICK_Config>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e00e      	b.n	80016fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b0f      	cmp	r3, #15
 80016e2:	d80a      	bhi.n	80016fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e4:	2200      	movs	r2, #0
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016ec:	f000 fd37 	bl	800215e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f0:	4a06      	ldr	r2, [pc, #24]	; (800170c <HAL_InitTick+0x5c>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e000      	b.n	80016fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000018 	.word	0x20000018
 8001708:	20000020 	.word	0x20000020
 800170c:	2000001c 	.word	0x2000001c

08001710 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_IncTick+0x20>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_IncTick+0x24>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4413      	add	r3, r2
 8001720:	4a04      	ldr	r2, [pc, #16]	; (8001734 <HAL_IncTick+0x24>)
 8001722:	6013      	str	r3, [r2, #0]
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000020 	.word	0x20000020
 8001734:	20000980 	.word	0x20000980

08001738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return uwTick;
 800173c:	4b03      	ldr	r3, [pc, #12]	; (800174c <HAL_GetTick+0x14>)
 800173e:	681b      	ldr	r3, [r3, #0]
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	20000980 	.word	0x20000980

08001750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001758:	f7ff ffee 	bl	8001738 <HAL_GetTick>
 800175c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001768:	d005      	beq.n	8001776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <HAL_Delay+0x44>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4413      	add	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001776:	bf00      	nop
 8001778:	f7ff ffde 	bl	8001738 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	429a      	cmp	r2, r3
 8001786:	d8f7      	bhi.n	8001778 <HAL_Delay+0x28>
  {
  }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000020 	.word	0x20000020

08001798 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017a0:	2300      	movs	r3, #0
 80017a2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e033      	b.n	8001816 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d109      	bne.n	80017ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff fe08 	bl	80013cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	f003 0310 	and.w	r3, r3, #16
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d118      	bne.n	8001808 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017de:	f023 0302 	bic.w	r3, r3, #2
 80017e2:	f043 0202 	orr.w	r2, r3, #2
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 fa5e 	bl	8001cac <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	f023 0303 	bic.w	r3, r3, #3
 80017fe:	f043 0201 	orr.w	r2, r3, #1
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	641a      	str	r2, [r3, #64]	; 0x40
 8001806:	e001      	b.n	800180c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001814:	7bfb      	ldrb	r3, [r7, #15]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800182c:	2300      	movs	r3, #0
 800182e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001836:	2b01      	cmp	r3, #1
 8001838:	d101      	bne.n	800183e <HAL_ADC_Start_DMA+0x1e>
 800183a:	2302      	movs	r3, #2
 800183c:	e0e9      	b.n	8001a12 <HAL_ADC_Start_DMA+0x1f2>
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	2b01      	cmp	r3, #1
 8001852:	d018      	beq.n	8001886 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 0201 	orr.w	r2, r2, #1
 8001862:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001864:	4b6d      	ldr	r3, [pc, #436]	; (8001a1c <HAL_ADC_Start_DMA+0x1fc>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a6d      	ldr	r2, [pc, #436]	; (8001a20 <HAL_ADC_Start_DMA+0x200>)
 800186a:	fba2 2303 	umull	r2, r3, r2, r3
 800186e:	0c9a      	lsrs	r2, r3, #18
 8001870:	4613      	mov	r3, r2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4413      	add	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001878:	e002      	b.n	8001880 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	3b01      	subs	r3, #1
 800187e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f9      	bne.n	800187a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001894:	d107      	bne.n	80018a6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018a4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	f040 80a1 	bne.w	80019f8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018be:	f023 0301 	bic.w	r3, r3, #1
 80018c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d007      	beq.n	80018e8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018f4:	d106      	bne.n	8001904 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	f023 0206 	bic.w	r2, r3, #6
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	645a      	str	r2, [r3, #68]	; 0x44
 8001902:	e002      	b.n	800190a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001912:	4b44      	ldr	r3, [pc, #272]	; (8001a24 <HAL_ADC_Start_DMA+0x204>)
 8001914:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191a:	4a43      	ldr	r2, [pc, #268]	; (8001a28 <HAL_ADC_Start_DMA+0x208>)
 800191c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001922:	4a42      	ldr	r2, [pc, #264]	; (8001a2c <HAL_ADC_Start_DMA+0x20c>)
 8001924:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192a:	4a41      	ldr	r2, [pc, #260]	; (8001a30 <HAL_ADC_Start_DMA+0x210>)
 800192c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001936:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001946:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001956:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	334c      	adds	r3, #76	; 0x4c
 8001962:	4619      	mov	r1, r3
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f000 fcde 	bl	8002328 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 031f 	and.w	r3, r3, #31
 8001974:	2b00      	cmp	r3, #0
 8001976:	d12a      	bne.n	80019ce <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a2d      	ldr	r2, [pc, #180]	; (8001a34 <HAL_ADC_Start_DMA+0x214>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d015      	beq.n	80019ae <HAL_ADC_Start_DMA+0x18e>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a2c      	ldr	r2, [pc, #176]	; (8001a38 <HAL_ADC_Start_DMA+0x218>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d105      	bne.n	8001998 <HAL_ADC_Start_DMA+0x178>
 800198c:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <HAL_ADC_Start_DMA+0x204>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 031f 	and.w	r3, r3, #31
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00a      	beq.n	80019ae <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a27      	ldr	r2, [pc, #156]	; (8001a3c <HAL_ADC_Start_DMA+0x21c>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d136      	bne.n	8001a10 <HAL_ADC_Start_DMA+0x1f0>
 80019a2:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <HAL_ADC_Start_DMA+0x204>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f003 0310 	and.w	r3, r3, #16
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d130      	bne.n	8001a10 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d129      	bne.n	8001a10 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	e020      	b.n	8001a10 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a18      	ldr	r2, [pc, #96]	; (8001a34 <HAL_ADC_Start_DMA+0x214>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d11b      	bne.n	8001a10 <HAL_ADC_Start_DMA+0x1f0>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d114      	bne.n	8001a10 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	e00b      	b.n	8001a10 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	f043 0210 	orr.w	r2, r3, #16
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a08:	f043 0201 	orr.w	r2, r3, #1
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000018 	.word	0x20000018
 8001a20:	431bde83 	.word	0x431bde83
 8001a24:	40012300 	.word	0x40012300
 8001a28:	08001ea5 	.word	0x08001ea5
 8001a2c:	08001f5f 	.word	0x08001f5f
 8001a30:	08001f7b 	.word	0x08001f7b
 8001a34:	40012000 	.word	0x40012000
 8001a38:	40012100 	.word	0x40012100
 8001a3c:	40012200 	.word	0x40012200

08001a40 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x1c>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e105      	b.n	8001c90 <HAL_ADC_ConfigChannel+0x228>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b09      	cmp	r3, #9
 8001a92:	d925      	bls.n	8001ae0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68d9      	ldr	r1, [r3, #12]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3b1e      	subs	r3, #30
 8001aaa:	2207      	movs	r2, #7
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43da      	mvns	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	400a      	ands	r2, r1
 8001ab8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68d9      	ldr	r1, [r3, #12]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	4618      	mov	r0, r3
 8001acc:	4603      	mov	r3, r0
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	4403      	add	r3, r0
 8001ad2:	3b1e      	subs	r3, #30
 8001ad4:	409a      	lsls	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	e022      	b.n	8001b26 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6919      	ldr	r1, [r3, #16]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	461a      	mov	r2, r3
 8001aee:	4613      	mov	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4413      	add	r3, r2
 8001af4:	2207      	movs	r2, #7
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43da      	mvns	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	400a      	ands	r2, r1
 8001b02:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6919      	ldr	r1, [r3, #16]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	4618      	mov	r0, r3
 8001b16:	4603      	mov	r3, r0
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	4403      	add	r3, r0
 8001b1c:	409a      	lsls	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b06      	cmp	r3, #6
 8001b2c:	d824      	bhi.n	8001b78 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3b05      	subs	r3, #5
 8001b40:	221f      	movs	r2, #31
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43da      	mvns	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	3b05      	subs	r3, #5
 8001b6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	635a      	str	r2, [r3, #52]	; 0x34
 8001b76:	e04c      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b0c      	cmp	r3, #12
 8001b7e:	d824      	bhi.n	8001bca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	3b23      	subs	r3, #35	; 0x23
 8001b92:	221f      	movs	r2, #31
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43da      	mvns	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	400a      	ands	r2, r1
 8001ba0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	4618      	mov	r0, r3
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	3b23      	subs	r3, #35	; 0x23
 8001bbc:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	631a      	str	r2, [r3, #48]	; 0x30
 8001bc8:	e023      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	3b41      	subs	r3, #65	; 0x41
 8001bdc:	221f      	movs	r2, #31
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43da      	mvns	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	400a      	ands	r2, r1
 8001bea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	3b41      	subs	r3, #65	; 0x41
 8001c06:	fa00 f203 	lsl.w	r2, r0, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c12:	4b22      	ldr	r3, [pc, #136]	; (8001c9c <HAL_ADC_ConfigChannel+0x234>)
 8001c14:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a21      	ldr	r2, [pc, #132]	; (8001ca0 <HAL_ADC_ConfigChannel+0x238>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d109      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x1cc>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b12      	cmp	r3, #18
 8001c26:	d105      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a19      	ldr	r2, [pc, #100]	; (8001ca0 <HAL_ADC_ConfigChannel+0x238>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d123      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x21e>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b10      	cmp	r3, #16
 8001c44:	d003      	beq.n	8001c4e <HAL_ADC_ConfigChannel+0x1e6>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2b11      	cmp	r3, #17
 8001c4c:	d11b      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2b10      	cmp	r3, #16
 8001c60:	d111      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c62:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <HAL_ADC_ConfigChannel+0x23c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a10      	ldr	r2, [pc, #64]	; (8001ca8 <HAL_ADC_ConfigChannel+0x240>)
 8001c68:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6c:	0c9a      	lsrs	r2, r3, #18
 8001c6e:	4613      	mov	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c78:	e002      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f9      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	40012300 	.word	0x40012300
 8001ca0:	40012000 	.word	0x40012000
 8001ca4:	20000018 	.word	0x20000018
 8001ca8:	431bde83 	.word	0x431bde83

08001cac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cb4:	4b79      	ldr	r3, [pc, #484]	; (8001e9c <ADC_Init+0x1f0>)
 8001cb6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ce0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6859      	ldr	r1, [r3, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	021a      	lsls	r2, r3, #8
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6859      	ldr	r1, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6899      	ldr	r1, [r3, #8]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3e:	4a58      	ldr	r2, [pc, #352]	; (8001ea0 <ADC_Init+0x1f4>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d022      	beq.n	8001d8a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6899      	ldr	r1, [r3, #8]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6899      	ldr	r1, [r3, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	e00f      	b.n	8001daa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001da8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 0202 	bic.w	r2, r2, #2
 8001db8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6899      	ldr	r1, [r3, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	7e1b      	ldrb	r3, [r3, #24]
 8001dc4:	005a      	lsls	r2, r3, #1
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d01b      	beq.n	8001e10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001de6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001df6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6859      	ldr	r1, [r3, #4]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	3b01      	subs	r3, #1
 8001e04:	035a      	lsls	r2, r3, #13
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	e007      	b.n	8001e20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e1e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	051a      	lsls	r2, r3, #20
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6899      	ldr	r1, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e62:	025a      	lsls	r2, r3, #9
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6899      	ldr	r1, [r3, #8]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	029a      	lsls	r2, r3, #10
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	609a      	str	r2, [r3, #8]
}
 8001e90:	bf00      	nop
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	40012300 	.word	0x40012300
 8001ea0:	0f000001 	.word	0x0f000001

08001ea4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d13c      	bne.n	8001f38 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d12b      	bne.n	8001f30 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d127      	bne.n	8001f30 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d006      	beq.n	8001efc <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d119      	bne.n	8001f30 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0220 	bic.w	r2, r2, #32
 8001f0a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d105      	bne.n	8001f30 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	f043 0201 	orr.w	r2, r3, #1
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f7ff fa0d 	bl	8001350 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001f36:	e00e      	b.n	8001f56 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	f003 0310 	and.w	r3, r3, #16
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f7ff fd85 	bl	8001a54 <HAL_ADC_ErrorCallback>
}
 8001f4a:	e004      	b.n	8001f56 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	4798      	blx	r3
}
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b084      	sub	sp, #16
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f7ff fd67 	bl	8001a40 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b084      	sub	sp, #16
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f86:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2240      	movs	r2, #64	; 0x40
 8001f8c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	f043 0204 	orr.w	r2, r3, #4
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f7ff fd5a 	bl	8001a54 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fa0:	bf00      	nop
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <__NVIC_SetPriorityGrouping+0x44>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fda:	4a04      	ldr	r2, [pc, #16]	; (8001fec <__NVIC_SetPriorityGrouping+0x44>)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	60d3      	str	r3, [r2, #12]
}
 8001fe0:	bf00      	nop
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff4:	4b04      	ldr	r3, [pc, #16]	; (8002008 <__NVIC_GetPriorityGrouping+0x18>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	0a1b      	lsrs	r3, r3, #8
 8001ffa:	f003 0307 	and.w	r3, r3, #7
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	2b00      	cmp	r3, #0
 800201c:	db0b      	blt.n	8002036 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	f003 021f 	and.w	r2, r3, #31
 8002024:	4907      	ldr	r1, [pc, #28]	; (8002044 <__NVIC_EnableIRQ+0x38>)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	2001      	movs	r0, #1
 800202e:	fa00 f202 	lsl.w	r2, r0, r2
 8002032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	e000e100 	.word	0xe000e100

08002048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	6039      	str	r1, [r7, #0]
 8002052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002058:	2b00      	cmp	r3, #0
 800205a:	db0a      	blt.n	8002072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	b2da      	uxtb	r2, r3
 8002060:	490c      	ldr	r1, [pc, #48]	; (8002094 <__NVIC_SetPriority+0x4c>)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	0112      	lsls	r2, r2, #4
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	440b      	add	r3, r1
 800206c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002070:	e00a      	b.n	8002088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4908      	ldr	r1, [pc, #32]	; (8002098 <__NVIC_SetPriority+0x50>)
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	3b04      	subs	r3, #4
 8002080:	0112      	lsls	r2, r2, #4
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	440b      	add	r3, r1
 8002086:	761a      	strb	r2, [r3, #24]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000e100 	.word	0xe000e100
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800209c:	b480      	push	{r7}
 800209e:	b089      	sub	sp, #36	; 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f1c3 0307 	rsb	r3, r3, #7
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	bf28      	it	cs
 80020ba:	2304      	movcs	r3, #4
 80020bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3304      	adds	r3, #4
 80020c2:	2b06      	cmp	r3, #6
 80020c4:	d902      	bls.n	80020cc <NVIC_EncodePriority+0x30>
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3b03      	subs	r3, #3
 80020ca:	e000      	b.n	80020ce <NVIC_EncodePriority+0x32>
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43da      	mvns	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	401a      	ands	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	43d9      	mvns	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f4:	4313      	orrs	r3, r2
         );
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3724      	adds	r7, #36	; 0x24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3b01      	subs	r3, #1
 8002110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002114:	d301      	bcc.n	800211a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002116:	2301      	movs	r3, #1
 8002118:	e00f      	b.n	800213a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800211a:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <SysTick_Config+0x40>)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3b01      	subs	r3, #1
 8002120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002122:	210f      	movs	r1, #15
 8002124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002128:	f7ff ff8e 	bl	8002048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <SysTick_Config+0x40>)
 800212e:	2200      	movs	r2, #0
 8002130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002132:	4b04      	ldr	r3, [pc, #16]	; (8002144 <SysTick_Config+0x40>)
 8002134:	2207      	movs	r2, #7
 8002136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	e000e010 	.word	0xe000e010

08002148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff ff29 	bl	8001fa8 <__NVIC_SetPriorityGrouping>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800215e:	b580      	push	{r7, lr}
 8002160:	b086      	sub	sp, #24
 8002162:	af00      	add	r7, sp, #0
 8002164:	4603      	mov	r3, r0
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	607a      	str	r2, [r7, #4]
 800216a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002170:	f7ff ff3e 	bl	8001ff0 <__NVIC_GetPriorityGrouping>
 8002174:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	6978      	ldr	r0, [r7, #20]
 800217c:	f7ff ff8e 	bl	800209c <NVIC_EncodePriority>
 8002180:	4602      	mov	r2, r0
 8002182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002186:	4611      	mov	r1, r2
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff5d 	bl	8002048 <__NVIC_SetPriority>
}
 800218e:	bf00      	nop
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	4603      	mov	r3, r0
 800219e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff ff31 	bl	800200c <__NVIC_EnableIRQ>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff ffa2 	bl	8002104 <SysTick_Config>
 80021c0:	4603      	mov	r3, r0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021d8:	f7ff faae 	bl	8001738 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e099      	b.n	800231c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2202      	movs	r2, #2
 80021ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0201 	bic.w	r2, r2, #1
 8002206:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002208:	e00f      	b.n	800222a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800220a:	f7ff fa95 	bl	8001738 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b05      	cmp	r3, #5
 8002216:	d908      	bls.n	800222a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2220      	movs	r2, #32
 800221c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2203      	movs	r2, #3
 8002222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e078      	b.n	800231c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1e8      	bne.n	800220a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	4b38      	ldr	r3, [pc, #224]	; (8002324 <HAL_DMA_Init+0x158>)
 8002244:	4013      	ands	r3, r2
 8002246:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002256:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002262:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800226e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	4313      	orrs	r3, r2
 800227a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	2b04      	cmp	r3, #4
 8002282:	d107      	bne.n	8002294 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228c:	4313      	orrs	r3, r2
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	4313      	orrs	r3, r2
 8002292:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f023 0307 	bic.w	r3, r3, #7
 80022aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d117      	bne.n	80022ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00e      	beq.n	80022ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 fa6f 	bl	80027b4 <DMA_CheckFifoParam>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d008      	beq.n	80022ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2240      	movs	r2, #64	; 0x40
 80022e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80022ea:	2301      	movs	r3, #1
 80022ec:	e016      	b.n	800231c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 fa26 	bl	8002748 <DMA_CalcBaseAndBitshift>
 80022fc:	4603      	mov	r3, r0
 80022fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002304:	223f      	movs	r2, #63	; 0x3f
 8002306:	409a      	lsls	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	f010803f 	.word	0xf010803f

08002328 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002346:	2b01      	cmp	r3, #1
 8002348:	d101      	bne.n	800234e <HAL_DMA_Start_IT+0x26>
 800234a:	2302      	movs	r3, #2
 800234c:	e040      	b.n	80023d0 <HAL_DMA_Start_IT+0xa8>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b01      	cmp	r3, #1
 8002360:	d12f      	bne.n	80023c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2202      	movs	r2, #2
 8002366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68b9      	ldr	r1, [r7, #8]
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 f9b8 	bl	80026ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002380:	223f      	movs	r2, #63	; 0x3f
 8002382:	409a      	lsls	r2, r3
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0216 	orr.w	r2, r2, #22
 8002396:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	2b00      	cmp	r3, #0
 800239e:	d007      	beq.n	80023b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0208 	orr.w	r2, r2, #8
 80023ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0201 	orr.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	e005      	b.n	80023ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023ca:	2302      	movs	r3, #2
 80023cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023e4:	4b8e      	ldr	r3, [pc, #568]	; (8002620 <HAL_DMA_IRQHandler+0x248>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a8e      	ldr	r2, [pc, #568]	; (8002624 <HAL_DMA_IRQHandler+0x24c>)
 80023ea:	fba2 2303 	umull	r2, r3, r2, r3
 80023ee:	0a9b      	lsrs	r3, r3, #10
 80023f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002402:	2208      	movs	r2, #8
 8002404:	409a      	lsls	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4013      	ands	r3, r2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d01a      	beq.n	8002444 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d013      	beq.n	8002444 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0204 	bic.w	r2, r2, #4
 800242a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002430:	2208      	movs	r2, #8
 8002432:	409a      	lsls	r2, r3
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243c:	f043 0201 	orr.w	r2, r3, #1
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002448:	2201      	movs	r2, #1
 800244a:	409a      	lsls	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4013      	ands	r3, r2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d012      	beq.n	800247a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00b      	beq.n	800247a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002466:	2201      	movs	r2, #1
 8002468:	409a      	lsls	r2, r3
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002472:	f043 0202 	orr.w	r2, r3, #2
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247e:	2204      	movs	r2, #4
 8002480:	409a      	lsls	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4013      	ands	r3, r2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d012      	beq.n	80024b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00b      	beq.n	80024b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249c:	2204      	movs	r2, #4
 800249e:	409a      	lsls	r2, r3
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a8:	f043 0204 	orr.w	r2, r3, #4
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b4:	2210      	movs	r2, #16
 80024b6:	409a      	lsls	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4013      	ands	r3, r2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d043      	beq.n	8002548 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d03c      	beq.n	8002548 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d2:	2210      	movs	r2, #16
 80024d4:	409a      	lsls	r2, r3
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d018      	beq.n	800251a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d108      	bne.n	8002508 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d024      	beq.n	8002548 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	4798      	blx	r3
 8002506:	e01f      	b.n	8002548 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800250c:	2b00      	cmp	r3, #0
 800250e:	d01b      	beq.n	8002548 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	4798      	blx	r3
 8002518:	e016      	b.n	8002548 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002524:	2b00      	cmp	r3, #0
 8002526:	d107      	bne.n	8002538 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0208 	bic.w	r2, r2, #8
 8002536:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254c:	2220      	movs	r2, #32
 800254e:	409a      	lsls	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4013      	ands	r3, r2
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 808f 	beq.w	8002678 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0310 	and.w	r3, r3, #16
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 8087 	beq.w	8002678 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256e:	2220      	movs	r2, #32
 8002570:	409a      	lsls	r2, r3
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b05      	cmp	r3, #5
 8002580:	d136      	bne.n	80025f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0216 	bic.w	r2, r2, #22
 8002590:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695a      	ldr	r2, [r3, #20]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d103      	bne.n	80025b2 <HAL_DMA_IRQHandler+0x1da>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d007      	beq.n	80025c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0208 	bic.w	r2, r2, #8
 80025c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c6:	223f      	movs	r2, #63	; 0x3f
 80025c8:	409a      	lsls	r2, r3
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d07e      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	4798      	blx	r3
        }
        return;
 80025ee:	e079      	b.n	80026e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d01d      	beq.n	800263a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10d      	bne.n	8002628 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002610:	2b00      	cmp	r3, #0
 8002612:	d031      	beq.n	8002678 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	4798      	blx	r3
 800261c:	e02c      	b.n	8002678 <HAL_DMA_IRQHandler+0x2a0>
 800261e:	bf00      	nop
 8002620:	20000018 	.word	0x20000018
 8002624:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262c:	2b00      	cmp	r3, #0
 800262e:	d023      	beq.n	8002678 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	4798      	blx	r3
 8002638:	e01e      	b.n	8002678 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10f      	bne.n	8002668 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0210 	bic.w	r2, r2, #16
 8002656:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267c:	2b00      	cmp	r3, #0
 800267e:	d032      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b00      	cmp	r3, #0
 800268a:	d022      	beq.n	80026d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2205      	movs	r2, #5
 8002690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0201 	bic.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	3301      	adds	r3, #1
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d307      	bcc.n	80026c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f2      	bne.n	80026a4 <HAL_DMA_IRQHandler+0x2cc>
 80026be:	e000      	b.n	80026c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80026c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d005      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	4798      	blx	r3
 80026e2:	e000      	b.n	80026e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80026e4:	bf00      	nop
    }
  }
}
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
 80026f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002708:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	2b40      	cmp	r3, #64	; 0x40
 8002718:	d108      	bne.n	800272c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800272a:	e007      	b.n	800273c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	60da      	str	r2, [r3, #12]
}
 800273c:	bf00      	nop
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	3b10      	subs	r3, #16
 8002758:	4a14      	ldr	r2, [pc, #80]	; (80027ac <DMA_CalcBaseAndBitshift+0x64>)
 800275a:	fba2 2303 	umull	r2, r3, r2, r3
 800275e:	091b      	lsrs	r3, r3, #4
 8002760:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002762:	4a13      	ldr	r2, [pc, #76]	; (80027b0 <DMA_CalcBaseAndBitshift+0x68>)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4413      	add	r3, r2
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	461a      	mov	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2b03      	cmp	r3, #3
 8002774:	d909      	bls.n	800278a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800277e:	f023 0303 	bic.w	r3, r3, #3
 8002782:	1d1a      	adds	r2, r3, #4
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	659a      	str	r2, [r3, #88]	; 0x58
 8002788:	e007      	b.n	800279a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002792:	f023 0303 	bic.w	r3, r3, #3
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	aaaaaaab 	.word	0xaaaaaaab
 80027b0:	08004088 	.word	0x08004088

080027b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d11f      	bne.n	800280e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d856      	bhi.n	8002882 <DMA_CheckFifoParam+0xce>
 80027d4:	a201      	add	r2, pc, #4	; (adr r2, 80027dc <DMA_CheckFifoParam+0x28>)
 80027d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027da:	bf00      	nop
 80027dc:	080027ed 	.word	0x080027ed
 80027e0:	080027ff 	.word	0x080027ff
 80027e4:	080027ed 	.word	0x080027ed
 80027e8:	08002883 	.word	0x08002883
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d046      	beq.n	8002886 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027fc:	e043      	b.n	8002886 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002806:	d140      	bne.n	800288a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800280c:	e03d      	b.n	800288a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002816:	d121      	bne.n	800285c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2b03      	cmp	r3, #3
 800281c:	d837      	bhi.n	800288e <DMA_CheckFifoParam+0xda>
 800281e:	a201      	add	r2, pc, #4	; (adr r2, 8002824 <DMA_CheckFifoParam+0x70>)
 8002820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002824:	08002835 	.word	0x08002835
 8002828:	0800283b 	.word	0x0800283b
 800282c:	08002835 	.word	0x08002835
 8002830:	0800284d 	.word	0x0800284d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	73fb      	strb	r3, [r7, #15]
      break;
 8002838:	e030      	b.n	800289c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d025      	beq.n	8002892 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800284a:	e022      	b.n	8002892 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002850:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002854:	d11f      	bne.n	8002896 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800285a:	e01c      	b.n	8002896 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d903      	bls.n	800286a <DMA_CheckFifoParam+0xb6>
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b03      	cmp	r3, #3
 8002866:	d003      	beq.n	8002870 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002868:	e018      	b.n	800289c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	73fb      	strb	r3, [r7, #15]
      break;
 800286e:	e015      	b.n	800289c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002874:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00e      	beq.n	800289a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	73fb      	strb	r3, [r7, #15]
      break;
 8002880:	e00b      	b.n	800289a <DMA_CheckFifoParam+0xe6>
      break;
 8002882:	bf00      	nop
 8002884:	e00a      	b.n	800289c <DMA_CheckFifoParam+0xe8>
      break;
 8002886:	bf00      	nop
 8002888:	e008      	b.n	800289c <DMA_CheckFifoParam+0xe8>
      break;
 800288a:	bf00      	nop
 800288c:	e006      	b.n	800289c <DMA_CheckFifoParam+0xe8>
      break;
 800288e:	bf00      	nop
 8002890:	e004      	b.n	800289c <DMA_CheckFifoParam+0xe8>
      break;
 8002892:	bf00      	nop
 8002894:	e002      	b.n	800289c <DMA_CheckFifoParam+0xe8>
      break;   
 8002896:	bf00      	nop
 8002898:	e000      	b.n	800289c <DMA_CheckFifoParam+0xe8>
      break;
 800289a:	bf00      	nop
    }
  } 
  
  return status; 
 800289c:	7bfb      	ldrb	r3, [r7, #15]
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop

080028ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b089      	sub	sp, #36	; 0x24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028be:	2300      	movs	r3, #0
 80028c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
 80028c6:	e16b      	b.n	8002ba0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028c8:	2201      	movs	r2, #1
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	4013      	ands	r3, r2
 80028da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	f040 815a 	bne.w	8002b9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d005      	beq.n	80028fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d130      	bne.n	8002960 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	2203      	movs	r2, #3
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002934:	2201      	movs	r2, #1
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4013      	ands	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	f003 0201 	and.w	r2, r3, #1
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	2b03      	cmp	r3, #3
 800296a:	d017      	beq.n	800299c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	2203      	movs	r2, #3
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4313      	orrs	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d123      	bne.n	80029f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	08da      	lsrs	r2, r3, #3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3208      	adds	r2, #8
 80029b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	220f      	movs	r2, #15
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	691a      	ldr	r2, [r3, #16]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	08da      	lsrs	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3208      	adds	r2, #8
 80029ea:	69b9      	ldr	r1, [r7, #24]
 80029ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	2203      	movs	r2, #3
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 0203 	and.w	r2, r3, #3
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 80b4 	beq.w	8002b9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	4b60      	ldr	r3, [pc, #384]	; (8002bb8 <HAL_GPIO_Init+0x30c>)
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	4a5f      	ldr	r2, [pc, #380]	; (8002bb8 <HAL_GPIO_Init+0x30c>)
 8002a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a40:	6453      	str	r3, [r2, #68]	; 0x44
 8002a42:	4b5d      	ldr	r3, [pc, #372]	; (8002bb8 <HAL_GPIO_Init+0x30c>)
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a4e:	4a5b      	ldr	r2, [pc, #364]	; (8002bbc <HAL_GPIO_Init+0x310>)
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	089b      	lsrs	r3, r3, #2
 8002a54:	3302      	adds	r3, #2
 8002a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	220f      	movs	r2, #15
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a52      	ldr	r2, [pc, #328]	; (8002bc0 <HAL_GPIO_Init+0x314>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d02b      	beq.n	8002ad2 <HAL_GPIO_Init+0x226>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a51      	ldr	r2, [pc, #324]	; (8002bc4 <HAL_GPIO_Init+0x318>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d025      	beq.n	8002ace <HAL_GPIO_Init+0x222>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a50      	ldr	r2, [pc, #320]	; (8002bc8 <HAL_GPIO_Init+0x31c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d01f      	beq.n	8002aca <HAL_GPIO_Init+0x21e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a4f      	ldr	r2, [pc, #316]	; (8002bcc <HAL_GPIO_Init+0x320>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d019      	beq.n	8002ac6 <HAL_GPIO_Init+0x21a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a4e      	ldr	r2, [pc, #312]	; (8002bd0 <HAL_GPIO_Init+0x324>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d013      	beq.n	8002ac2 <HAL_GPIO_Init+0x216>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a4d      	ldr	r2, [pc, #308]	; (8002bd4 <HAL_GPIO_Init+0x328>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d00d      	beq.n	8002abe <HAL_GPIO_Init+0x212>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a4c      	ldr	r2, [pc, #304]	; (8002bd8 <HAL_GPIO_Init+0x32c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d007      	beq.n	8002aba <HAL_GPIO_Init+0x20e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a4b      	ldr	r2, [pc, #300]	; (8002bdc <HAL_GPIO_Init+0x330>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d101      	bne.n	8002ab6 <HAL_GPIO_Init+0x20a>
 8002ab2:	2307      	movs	r3, #7
 8002ab4:	e00e      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002ab6:	2308      	movs	r3, #8
 8002ab8:	e00c      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002aba:	2306      	movs	r3, #6
 8002abc:	e00a      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002abe:	2305      	movs	r3, #5
 8002ac0:	e008      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002ac2:	2304      	movs	r3, #4
 8002ac4:	e006      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e004      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e002      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	69fa      	ldr	r2, [r7, #28]
 8002ad6:	f002 0203 	and.w	r2, r2, #3
 8002ada:	0092      	lsls	r2, r2, #2
 8002adc:	4093      	lsls	r3, r2
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ae4:	4935      	ldr	r1, [pc, #212]	; (8002bbc <HAL_GPIO_Init+0x310>)
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	089b      	lsrs	r3, r3, #2
 8002aea:	3302      	adds	r3, #2
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002af2:	4b3b      	ldr	r3, [pc, #236]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	43db      	mvns	r3, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4013      	ands	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b16:	4a32      	ldr	r2, [pc, #200]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b1c:	4b30      	ldr	r3, [pc, #192]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b40:	4a27      	ldr	r2, [pc, #156]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b46:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4013      	ands	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b6a:	4a1d      	ldr	r2, [pc, #116]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b70:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b94:	4a12      	ldr	r2, [pc, #72]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	61fb      	str	r3, [r7, #28]
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	2b0f      	cmp	r3, #15
 8002ba4:	f67f ae90 	bls.w	80028c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	3724      	adds	r7, #36	; 0x24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	40013800 	.word	0x40013800
 8002bc0:	40020000 	.word	0x40020000
 8002bc4:	40020400 	.word	0x40020400
 8002bc8:	40020800 	.word	0x40020800
 8002bcc:	40020c00 	.word	0x40020c00
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	40021400 	.word	0x40021400
 8002bd8:	40021800 	.word	0x40021800
 8002bdc:	40021c00 	.word	0x40021c00
 8002be0:	40013c00 	.word	0x40013c00

08002be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	807b      	strh	r3, [r7, #2]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bf4:	787b      	ldrb	r3, [r7, #1]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bfa:	887a      	ldrh	r2, [r7, #2]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c00:	e003      	b.n	8002c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c02:	887b      	ldrh	r3, [r7, #2]
 8002c04:	041a      	lsls	r2, r3, #16
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	619a      	str	r2, [r3, #24]
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e267      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d075      	beq.n	8002d22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c36:	4b88      	ldr	r3, [pc, #544]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d00c      	beq.n	8002c5c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c42:	4b85      	ldr	r3, [pc, #532]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d112      	bne.n	8002c74 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c4e:	4b82      	ldr	r3, [pc, #520]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c5a:	d10b      	bne.n	8002c74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5c:	4b7e      	ldr	r3, [pc, #504]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d05b      	beq.n	8002d20 <HAL_RCC_OscConfig+0x108>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d157      	bne.n	8002d20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e242      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c7c:	d106      	bne.n	8002c8c <HAL_RCC_OscConfig+0x74>
 8002c7e:	4b76      	ldr	r3, [pc, #472]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a75      	ldr	r2, [pc, #468]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	e01d      	b.n	8002cc8 <HAL_RCC_OscConfig+0xb0>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x98>
 8002c96:	4b70      	ldr	r3, [pc, #448]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a6f      	ldr	r2, [pc, #444]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	4b6d      	ldr	r3, [pc, #436]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a6c      	ldr	r2, [pc, #432]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	e00b      	b.n	8002cc8 <HAL_RCC_OscConfig+0xb0>
 8002cb0:	4b69      	ldr	r3, [pc, #420]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a68      	ldr	r2, [pc, #416]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	4b66      	ldr	r3, [pc, #408]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a65      	ldr	r2, [pc, #404]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d013      	beq.n	8002cf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd0:	f7fe fd32 	bl	8001738 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd8:	f7fe fd2e 	bl	8001738 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b64      	cmp	r3, #100	; 0x64
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e207      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cea:	4b5b      	ldr	r3, [pc, #364]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0xc0>
 8002cf6:	e014      	b.n	8002d22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf8:	f7fe fd1e 	bl	8001738 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d00:	f7fe fd1a 	bl	8001738 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	; 0x64
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e1f3      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d12:	4b51      	ldr	r3, [pc, #324]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f0      	bne.n	8002d00 <HAL_RCC_OscConfig+0xe8>
 8002d1e:	e000      	b.n	8002d22 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d063      	beq.n	8002df6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d2e:	4b4a      	ldr	r3, [pc, #296]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00b      	beq.n	8002d52 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d3a:	4b47      	ldr	r3, [pc, #284]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d11c      	bne.n	8002d80 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d46:	4b44      	ldr	r3, [pc, #272]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d116      	bne.n	8002d80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d52:	4b41      	ldr	r3, [pc, #260]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d005      	beq.n	8002d6a <HAL_RCC_OscConfig+0x152>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d001      	beq.n	8002d6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e1c7      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6a:	4b3b      	ldr	r3, [pc, #236]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	4937      	ldr	r1, [pc, #220]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7e:	e03a      	b.n	8002df6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d020      	beq.n	8002dca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d88:	4b34      	ldr	r3, [pc, #208]	; (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8e:	f7fe fcd3 	bl	8001738 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d96:	f7fe fccf 	bl	8001738 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e1a8      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da8:	4b2b      	ldr	r3, [pc, #172]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db4:	4b28      	ldr	r3, [pc, #160]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	4925      	ldr	r1, [pc, #148]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	600b      	str	r3, [r1, #0]
 8002dc8:	e015      	b.n	8002df6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dca:	4b24      	ldr	r3, [pc, #144]	; (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd0:	f7fe fcb2 	bl	8001738 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd8:	f7fe fcae 	bl	8001738 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e187      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dea:	4b1b      	ldr	r3, [pc, #108]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d036      	beq.n	8002e70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d016      	beq.n	8002e38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e0a:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <HAL_RCC_OscConfig+0x248>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e10:	f7fe fc92 	bl	8001738 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e18:	f7fe fc8e 	bl	8001738 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e167      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2a:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0x200>
 8002e36:	e01b      	b.n	8002e70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e38:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_RCC_OscConfig+0x248>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3e:	f7fe fc7b 	bl	8001738 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e44:	e00e      	b.n	8002e64 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e46:	f7fe fc77 	bl	8001738 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d907      	bls.n	8002e64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e150      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	42470000 	.word	0x42470000
 8002e60:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e64:	4b88      	ldr	r3, [pc, #544]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1ea      	bne.n	8002e46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 8097 	beq.w	8002fac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e82:	4b81      	ldr	r3, [pc, #516]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10f      	bne.n	8002eae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	4b7d      	ldr	r3, [pc, #500]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	4a7c      	ldr	r2, [pc, #496]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e9e:	4b7a      	ldr	r3, [pc, #488]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea6:	60bb      	str	r3, [r7, #8]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eae:	4b77      	ldr	r3, [pc, #476]	; (800308c <HAL_RCC_OscConfig+0x474>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d118      	bne.n	8002eec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eba:	4b74      	ldr	r3, [pc, #464]	; (800308c <HAL_RCC_OscConfig+0x474>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a73      	ldr	r2, [pc, #460]	; (800308c <HAL_RCC_OscConfig+0x474>)
 8002ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec6:	f7fe fc37 	bl	8001738 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ece:	f7fe fc33 	bl	8001738 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e10c      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee0:	4b6a      	ldr	r3, [pc, #424]	; (800308c <HAL_RCC_OscConfig+0x474>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0f0      	beq.n	8002ece <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d106      	bne.n	8002f02 <HAL_RCC_OscConfig+0x2ea>
 8002ef4:	4b64      	ldr	r3, [pc, #400]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef8:	4a63      	ldr	r2, [pc, #396]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	6713      	str	r3, [r2, #112]	; 0x70
 8002f00:	e01c      	b.n	8002f3c <HAL_RCC_OscConfig+0x324>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	2b05      	cmp	r3, #5
 8002f08:	d10c      	bne.n	8002f24 <HAL_RCC_OscConfig+0x30c>
 8002f0a:	4b5f      	ldr	r3, [pc, #380]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0e:	4a5e      	ldr	r2, [pc, #376]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f10:	f043 0304 	orr.w	r3, r3, #4
 8002f14:	6713      	str	r3, [r2, #112]	; 0x70
 8002f16:	4b5c      	ldr	r3, [pc, #368]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1a:	4a5b      	ldr	r2, [pc, #364]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	6713      	str	r3, [r2, #112]	; 0x70
 8002f22:	e00b      	b.n	8002f3c <HAL_RCC_OscConfig+0x324>
 8002f24:	4b58      	ldr	r3, [pc, #352]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f28:	4a57      	ldr	r2, [pc, #348]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f2a:	f023 0301 	bic.w	r3, r3, #1
 8002f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f30:	4b55      	ldr	r3, [pc, #340]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f34:	4a54      	ldr	r2, [pc, #336]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f36:	f023 0304 	bic.w	r3, r3, #4
 8002f3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d015      	beq.n	8002f70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f44:	f7fe fbf8 	bl	8001738 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4c:	f7fe fbf4 	bl	8001738 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e0cb      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f62:	4b49      	ldr	r3, [pc, #292]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0ee      	beq.n	8002f4c <HAL_RCC_OscConfig+0x334>
 8002f6e:	e014      	b.n	8002f9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f70:	f7fe fbe2 	bl	8001738 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f76:	e00a      	b.n	8002f8e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f78:	f7fe fbde 	bl	8001738 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e0b5      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f8e:	4b3e      	ldr	r3, [pc, #248]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1ee      	bne.n	8002f78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f9a:	7dfb      	ldrb	r3, [r7, #23]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d105      	bne.n	8002fac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa0:	4b39      	ldr	r3, [pc, #228]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	4a38      	ldr	r2, [pc, #224]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002fa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002faa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 80a1 	beq.w	80030f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fb6:	4b34      	ldr	r3, [pc, #208]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d05c      	beq.n	800307c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d141      	bne.n	800304e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fca:	4b31      	ldr	r3, [pc, #196]	; (8003090 <HAL_RCC_OscConfig+0x478>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7fe fbb2 	bl	8001738 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd8:	f7fe fbae 	bl	8001738 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e087      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fea:	4b27      	ldr	r3, [pc, #156]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69da      	ldr	r2, [r3, #28]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	019b      	lsls	r3, r3, #6
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	085b      	lsrs	r3, r3, #1
 800300e:	3b01      	subs	r3, #1
 8003010:	041b      	lsls	r3, r3, #16
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003018:	061b      	lsls	r3, r3, #24
 800301a:	491b      	ldr	r1, [pc, #108]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 800301c:	4313      	orrs	r3, r2
 800301e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003020:	4b1b      	ldr	r3, [pc, #108]	; (8003090 <HAL_RCC_OscConfig+0x478>)
 8003022:	2201      	movs	r2, #1
 8003024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003026:	f7fe fb87 	bl	8001738 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302e:	f7fe fb83 	bl	8001738 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e05c      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003040:	4b11      	ldr	r3, [pc, #68]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0f0      	beq.n	800302e <HAL_RCC_OscConfig+0x416>
 800304c:	e054      	b.n	80030f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304e:	4b10      	ldr	r3, [pc, #64]	; (8003090 <HAL_RCC_OscConfig+0x478>)
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003054:	f7fe fb70 	bl	8001738 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305c:	f7fe fb6c 	bl	8001738 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e045      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306e:	4b06      	ldr	r3, [pc, #24]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x444>
 800307a:	e03d      	b.n	80030f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d107      	bne.n	8003094 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e038      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
 8003088:	40023800 	.word	0x40023800
 800308c:	40007000 	.word	0x40007000
 8003090:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003094:	4b1b      	ldr	r3, [pc, #108]	; (8003104 <HAL_RCC_OscConfig+0x4ec>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d028      	beq.n	80030f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d121      	bne.n	80030f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d11a      	bne.n	80030f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030c4:	4013      	ands	r3, r2
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d111      	bne.n	80030f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030da:	085b      	lsrs	r3, r3, #1
 80030dc:	3b01      	subs	r3, #1
 80030de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d107      	bne.n	80030f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d001      	beq.n	80030f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e000      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40023800 	.word	0x40023800

08003108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0cc      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800311c:	4b68      	ldr	r3, [pc, #416]	; (80032c0 <HAL_RCC_ClockConfig+0x1b8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d90c      	bls.n	8003144 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312a:	4b65      	ldr	r3, [pc, #404]	; (80032c0 <HAL_RCC_ClockConfig+0x1b8>)
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003132:	4b63      	ldr	r3, [pc, #396]	; (80032c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	429a      	cmp	r2, r3
 800313e:	d001      	beq.n	8003144 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0b8      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d020      	beq.n	8003192 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	d005      	beq.n	8003168 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800315c:	4b59      	ldr	r3, [pc, #356]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	4a58      	ldr	r2, [pc, #352]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003166:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003174:	4b53      	ldr	r3, [pc, #332]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	4a52      	ldr	r2, [pc, #328]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 800317a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800317e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003180:	4b50      	ldr	r3, [pc, #320]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	494d      	ldr	r1, [pc, #308]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	4313      	orrs	r3, r2
 8003190:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d044      	beq.n	8003228 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d107      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a6:	4b47      	ldr	r3, [pc, #284]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d119      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e07f      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d003      	beq.n	80031c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	d107      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c6:	4b3f      	ldr	r3, [pc, #252]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d109      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e06f      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d6:	4b3b      	ldr	r3, [pc, #236]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e067      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031e6:	4b37      	ldr	r3, [pc, #220]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f023 0203 	bic.w	r2, r3, #3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	4934      	ldr	r1, [pc, #208]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031f8:	f7fe fa9e 	bl	8001738 <HAL_GetTick>
 80031fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fe:	e00a      	b.n	8003216 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003200:	f7fe fa9a 	bl	8001738 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	f241 3288 	movw	r2, #5000	; 0x1388
 800320e:	4293      	cmp	r3, r2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e04f      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003216:	4b2b      	ldr	r3, [pc, #172]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 020c 	and.w	r2, r3, #12
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	429a      	cmp	r2, r3
 8003226:	d1eb      	bne.n	8003200 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003228:	4b25      	ldr	r3, [pc, #148]	; (80032c0 <HAL_RCC_ClockConfig+0x1b8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d20c      	bcs.n	8003250 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003236:	4b22      	ldr	r3, [pc, #136]	; (80032c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800323e:	4b20      	ldr	r3, [pc, #128]	; (80032c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	429a      	cmp	r2, r3
 800324a:	d001      	beq.n	8003250 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e032      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b00      	cmp	r3, #0
 800325a:	d008      	beq.n	800326e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800325c:	4b19      	ldr	r3, [pc, #100]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	4916      	ldr	r1, [pc, #88]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	4313      	orrs	r3, r2
 800326c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b00      	cmp	r3, #0
 8003278:	d009      	beq.n	800328e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800327a:	4b12      	ldr	r3, [pc, #72]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	490e      	ldr	r1, [pc, #56]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	4313      	orrs	r3, r2
 800328c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800328e:	f000 f821 	bl	80032d4 <HAL_RCC_GetSysClockFreq>
 8003292:	4602      	mov	r2, r0
 8003294:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	091b      	lsrs	r3, r3, #4
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	490a      	ldr	r1, [pc, #40]	; (80032c8 <HAL_RCC_ClockConfig+0x1c0>)
 80032a0:	5ccb      	ldrb	r3, [r1, r3]
 80032a2:	fa22 f303 	lsr.w	r3, r2, r3
 80032a6:	4a09      	ldr	r2, [pc, #36]	; (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 80032a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80032aa:	4b09      	ldr	r3, [pc, #36]	; (80032d0 <HAL_RCC_ClockConfig+0x1c8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fe f9fe 	bl	80016b0 <HAL_InitTick>

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40023c00 	.word	0x40023c00
 80032c4:	40023800 	.word	0x40023800
 80032c8:	08004070 	.word	0x08004070
 80032cc:	20000018 	.word	0x20000018
 80032d0:	2000001c 	.word	0x2000001c

080032d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032d8:	b090      	sub	sp, #64	; 0x40
 80032da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032ec:	4b59      	ldr	r3, [pc, #356]	; (8003454 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 030c 	and.w	r3, r3, #12
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d00d      	beq.n	8003314 <HAL_RCC_GetSysClockFreq+0x40>
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	f200 80a1 	bhi.w	8003440 <HAL_RCC_GetSysClockFreq+0x16c>
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <HAL_RCC_GetSysClockFreq+0x34>
 8003302:	2b04      	cmp	r3, #4
 8003304:	d003      	beq.n	800330e <HAL_RCC_GetSysClockFreq+0x3a>
 8003306:	e09b      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003308:	4b53      	ldr	r3, [pc, #332]	; (8003458 <HAL_RCC_GetSysClockFreq+0x184>)
 800330a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800330c:	e09b      	b.n	8003446 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800330e:	4b53      	ldr	r3, [pc, #332]	; (800345c <HAL_RCC_GetSysClockFreq+0x188>)
 8003310:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003312:	e098      	b.n	8003446 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003314:	4b4f      	ldr	r3, [pc, #316]	; (8003454 <HAL_RCC_GetSysClockFreq+0x180>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800331c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800331e:	4b4d      	ldr	r3, [pc, #308]	; (8003454 <HAL_RCC_GetSysClockFreq+0x180>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d028      	beq.n	800337c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800332a:	4b4a      	ldr	r3, [pc, #296]	; (8003454 <HAL_RCC_GetSysClockFreq+0x180>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	099b      	lsrs	r3, r3, #6
 8003330:	2200      	movs	r2, #0
 8003332:	623b      	str	r3, [r7, #32]
 8003334:	627a      	str	r2, [r7, #36]	; 0x24
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800333c:	2100      	movs	r1, #0
 800333e:	4b47      	ldr	r3, [pc, #284]	; (800345c <HAL_RCC_GetSysClockFreq+0x188>)
 8003340:	fb03 f201 	mul.w	r2, r3, r1
 8003344:	2300      	movs	r3, #0
 8003346:	fb00 f303 	mul.w	r3, r0, r3
 800334a:	4413      	add	r3, r2
 800334c:	4a43      	ldr	r2, [pc, #268]	; (800345c <HAL_RCC_GetSysClockFreq+0x188>)
 800334e:	fba0 1202 	umull	r1, r2, r0, r2
 8003352:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003354:	460a      	mov	r2, r1
 8003356:	62ba      	str	r2, [r7, #40]	; 0x28
 8003358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800335a:	4413      	add	r3, r2
 800335c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800335e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003360:	2200      	movs	r2, #0
 8003362:	61bb      	str	r3, [r7, #24]
 8003364:	61fa      	str	r2, [r7, #28]
 8003366:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800336a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800336e:	f7fd fb21 	bl	80009b4 <__aeabi_uldivmod>
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	4613      	mov	r3, r2
 8003378:	63fb      	str	r3, [r7, #60]	; 0x3c
 800337a:	e053      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800337c:	4b35      	ldr	r3, [pc, #212]	; (8003454 <HAL_RCC_GetSysClockFreq+0x180>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	099b      	lsrs	r3, r3, #6
 8003382:	2200      	movs	r2, #0
 8003384:	613b      	str	r3, [r7, #16]
 8003386:	617a      	str	r2, [r7, #20]
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800338e:	f04f 0b00 	mov.w	fp, #0
 8003392:	4652      	mov	r2, sl
 8003394:	465b      	mov	r3, fp
 8003396:	f04f 0000 	mov.w	r0, #0
 800339a:	f04f 0100 	mov.w	r1, #0
 800339e:	0159      	lsls	r1, r3, #5
 80033a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033a4:	0150      	lsls	r0, r2, #5
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	ebb2 080a 	subs.w	r8, r2, sl
 80033ae:	eb63 090b 	sbc.w	r9, r3, fp
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	f04f 0300 	mov.w	r3, #0
 80033ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80033be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80033c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80033c6:	ebb2 0408 	subs.w	r4, r2, r8
 80033ca:	eb63 0509 	sbc.w	r5, r3, r9
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	00eb      	lsls	r3, r5, #3
 80033d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033dc:	00e2      	lsls	r2, r4, #3
 80033de:	4614      	mov	r4, r2
 80033e0:	461d      	mov	r5, r3
 80033e2:	eb14 030a 	adds.w	r3, r4, sl
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	eb45 030b 	adc.w	r3, r5, fp
 80033ec:	607b      	str	r3, [r7, #4]
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	f04f 0300 	mov.w	r3, #0
 80033f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033fa:	4629      	mov	r1, r5
 80033fc:	028b      	lsls	r3, r1, #10
 80033fe:	4621      	mov	r1, r4
 8003400:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003404:	4621      	mov	r1, r4
 8003406:	028a      	lsls	r2, r1, #10
 8003408:	4610      	mov	r0, r2
 800340a:	4619      	mov	r1, r3
 800340c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800340e:	2200      	movs	r2, #0
 8003410:	60bb      	str	r3, [r7, #8]
 8003412:	60fa      	str	r2, [r7, #12]
 8003414:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003418:	f7fd facc 	bl	80009b4 <__aeabi_uldivmod>
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4613      	mov	r3, r2
 8003422:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003424:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <HAL_RCC_GetSysClockFreq+0x180>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	0c1b      	lsrs	r3, r3, #16
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	3301      	adds	r3, #1
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003434:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003438:	fbb2 f3f3 	udiv	r3, r2, r3
 800343c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800343e:	e002      	b.n	8003446 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003440:	4b05      	ldr	r3, [pc, #20]	; (8003458 <HAL_RCC_GetSysClockFreq+0x184>)
 8003442:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003448:	4618      	mov	r0, r3
 800344a:	3740      	adds	r7, #64	; 0x40
 800344c:	46bd      	mov	sp, r7
 800344e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003452:	bf00      	nop
 8003454:	40023800 	.word	0x40023800
 8003458:	00f42400 	.word	0x00f42400
 800345c:	017d7840 	.word	0x017d7840

08003460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003464:	4b03      	ldr	r3, [pc, #12]	; (8003474 <HAL_RCC_GetHCLKFreq+0x14>)
 8003466:	681b      	ldr	r3, [r3, #0]
}
 8003468:	4618      	mov	r0, r3
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	20000018 	.word	0x20000018

08003478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800347c:	f7ff fff0 	bl	8003460 <HAL_RCC_GetHCLKFreq>
 8003480:	4602      	mov	r2, r0
 8003482:	4b05      	ldr	r3, [pc, #20]	; (8003498 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	0a9b      	lsrs	r3, r3, #10
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	4903      	ldr	r1, [pc, #12]	; (800349c <HAL_RCC_GetPCLK1Freq+0x24>)
 800348e:	5ccb      	ldrb	r3, [r1, r3]
 8003490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003494:	4618      	mov	r0, r3
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40023800 	.word	0x40023800
 800349c:	08004080 	.word	0x08004080

080034a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034a4:	f7ff ffdc 	bl	8003460 <HAL_RCC_GetHCLKFreq>
 80034a8:	4602      	mov	r2, r0
 80034aa:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	0b5b      	lsrs	r3, r3, #13
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	4903      	ldr	r1, [pc, #12]	; (80034c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034b6:	5ccb      	ldrb	r3, [r1, r3]
 80034b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034bc:	4618      	mov	r0, r3
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40023800 	.word	0x40023800
 80034c4:	08004080 	.word	0x08004080

080034c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e041      	b.n	800355e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d106      	bne.n	80034f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fd ffe4 	bl	80014bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3304      	adds	r3, #4
 8003504:	4619      	mov	r1, r3
 8003506:	4610      	mov	r0, r2
 8003508:	f000 f8f4 	bl	80036f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b084      	sub	sp, #16
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800357a:	2b01      	cmp	r3, #1
 800357c:	d101      	bne.n	8003582 <HAL_TIM_ConfigClockSource+0x1c>
 800357e:	2302      	movs	r3, #2
 8003580:	e0b4      	b.n	80036ec <HAL_TIM_ConfigClockSource+0x186>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2202      	movs	r2, #2
 800358e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035a0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035a8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ba:	d03e      	beq.n	800363a <HAL_TIM_ConfigClockSource+0xd4>
 80035bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035c0:	f200 8087 	bhi.w	80036d2 <HAL_TIM_ConfigClockSource+0x16c>
 80035c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c8:	f000 8086 	beq.w	80036d8 <HAL_TIM_ConfigClockSource+0x172>
 80035cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d0:	d87f      	bhi.n	80036d2 <HAL_TIM_ConfigClockSource+0x16c>
 80035d2:	2b70      	cmp	r3, #112	; 0x70
 80035d4:	d01a      	beq.n	800360c <HAL_TIM_ConfigClockSource+0xa6>
 80035d6:	2b70      	cmp	r3, #112	; 0x70
 80035d8:	d87b      	bhi.n	80036d2 <HAL_TIM_ConfigClockSource+0x16c>
 80035da:	2b60      	cmp	r3, #96	; 0x60
 80035dc:	d050      	beq.n	8003680 <HAL_TIM_ConfigClockSource+0x11a>
 80035de:	2b60      	cmp	r3, #96	; 0x60
 80035e0:	d877      	bhi.n	80036d2 <HAL_TIM_ConfigClockSource+0x16c>
 80035e2:	2b50      	cmp	r3, #80	; 0x50
 80035e4:	d03c      	beq.n	8003660 <HAL_TIM_ConfigClockSource+0xfa>
 80035e6:	2b50      	cmp	r3, #80	; 0x50
 80035e8:	d873      	bhi.n	80036d2 <HAL_TIM_ConfigClockSource+0x16c>
 80035ea:	2b40      	cmp	r3, #64	; 0x40
 80035ec:	d058      	beq.n	80036a0 <HAL_TIM_ConfigClockSource+0x13a>
 80035ee:	2b40      	cmp	r3, #64	; 0x40
 80035f0:	d86f      	bhi.n	80036d2 <HAL_TIM_ConfigClockSource+0x16c>
 80035f2:	2b30      	cmp	r3, #48	; 0x30
 80035f4:	d064      	beq.n	80036c0 <HAL_TIM_ConfigClockSource+0x15a>
 80035f6:	2b30      	cmp	r3, #48	; 0x30
 80035f8:	d86b      	bhi.n	80036d2 <HAL_TIM_ConfigClockSource+0x16c>
 80035fa:	2b20      	cmp	r3, #32
 80035fc:	d060      	beq.n	80036c0 <HAL_TIM_ConfigClockSource+0x15a>
 80035fe:	2b20      	cmp	r3, #32
 8003600:	d867      	bhi.n	80036d2 <HAL_TIM_ConfigClockSource+0x16c>
 8003602:	2b00      	cmp	r3, #0
 8003604:	d05c      	beq.n	80036c0 <HAL_TIM_ConfigClockSource+0x15a>
 8003606:	2b10      	cmp	r3, #16
 8003608:	d05a      	beq.n	80036c0 <HAL_TIM_ConfigClockSource+0x15a>
 800360a:	e062      	b.n	80036d2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800361c:	f000 f990 	bl	8003940 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800362e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	609a      	str	r2, [r3, #8]
      break;
 8003638:	e04f      	b.n	80036da <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800364a:	f000 f979 	bl	8003940 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800365c:	609a      	str	r2, [r3, #8]
      break;
 800365e:	e03c      	b.n	80036da <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800366c:	461a      	mov	r2, r3
 800366e:	f000 f8ed 	bl	800384c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2150      	movs	r1, #80	; 0x50
 8003678:	4618      	mov	r0, r3
 800367a:	f000 f946 	bl	800390a <TIM_ITRx_SetConfig>
      break;
 800367e:	e02c      	b.n	80036da <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800368c:	461a      	mov	r2, r3
 800368e:	f000 f90c 	bl	80038aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2160      	movs	r1, #96	; 0x60
 8003698:	4618      	mov	r0, r3
 800369a:	f000 f936 	bl	800390a <TIM_ITRx_SetConfig>
      break;
 800369e:	e01c      	b.n	80036da <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ac:	461a      	mov	r2, r3
 80036ae:	f000 f8cd 	bl	800384c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2140      	movs	r1, #64	; 0x40
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 f926 	bl	800390a <TIM_ITRx_SetConfig>
      break;
 80036be:	e00c      	b.n	80036da <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4619      	mov	r1, r3
 80036ca:	4610      	mov	r0, r2
 80036cc:	f000 f91d 	bl	800390a <TIM_ITRx_SetConfig>
      break;
 80036d0:	e003      	b.n	80036da <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	73fb      	strb	r3, [r7, #15]
      break;
 80036d6:	e000      	b.n	80036da <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a46      	ldr	r2, [pc, #280]	; (8003820 <TIM_Base_SetConfig+0x12c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d013      	beq.n	8003734 <TIM_Base_SetConfig+0x40>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003712:	d00f      	beq.n	8003734 <TIM_Base_SetConfig+0x40>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a43      	ldr	r2, [pc, #268]	; (8003824 <TIM_Base_SetConfig+0x130>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d00b      	beq.n	8003734 <TIM_Base_SetConfig+0x40>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a42      	ldr	r2, [pc, #264]	; (8003828 <TIM_Base_SetConfig+0x134>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d007      	beq.n	8003734 <TIM_Base_SetConfig+0x40>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a41      	ldr	r2, [pc, #260]	; (800382c <TIM_Base_SetConfig+0x138>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d003      	beq.n	8003734 <TIM_Base_SetConfig+0x40>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a40      	ldr	r2, [pc, #256]	; (8003830 <TIM_Base_SetConfig+0x13c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d108      	bne.n	8003746 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a35      	ldr	r2, [pc, #212]	; (8003820 <TIM_Base_SetConfig+0x12c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d02b      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003754:	d027      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a32      	ldr	r2, [pc, #200]	; (8003824 <TIM_Base_SetConfig+0x130>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d023      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a31      	ldr	r2, [pc, #196]	; (8003828 <TIM_Base_SetConfig+0x134>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d01f      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a30      	ldr	r2, [pc, #192]	; (800382c <TIM_Base_SetConfig+0x138>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d01b      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a2f      	ldr	r2, [pc, #188]	; (8003830 <TIM_Base_SetConfig+0x13c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d017      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a2e      	ldr	r2, [pc, #184]	; (8003834 <TIM_Base_SetConfig+0x140>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d013      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a2d      	ldr	r2, [pc, #180]	; (8003838 <TIM_Base_SetConfig+0x144>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d00f      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a2c      	ldr	r2, [pc, #176]	; (800383c <TIM_Base_SetConfig+0x148>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d00b      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a2b      	ldr	r2, [pc, #172]	; (8003840 <TIM_Base_SetConfig+0x14c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d007      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a2a      	ldr	r2, [pc, #168]	; (8003844 <TIM_Base_SetConfig+0x150>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d003      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a29      	ldr	r2, [pc, #164]	; (8003848 <TIM_Base_SetConfig+0x154>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d108      	bne.n	80037b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a10      	ldr	r2, [pc, #64]	; (8003820 <TIM_Base_SetConfig+0x12c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d003      	beq.n	80037ec <TIM_Base_SetConfig+0xf8>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a12      	ldr	r2, [pc, #72]	; (8003830 <TIM_Base_SetConfig+0x13c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d103      	bne.n	80037f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	691a      	ldr	r2, [r3, #16]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b01      	cmp	r3, #1
 8003804:	d105      	bne.n	8003812 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f023 0201 	bic.w	r2, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	611a      	str	r2, [r3, #16]
  }
}
 8003812:	bf00      	nop
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40010000 	.word	0x40010000
 8003824:	40000400 	.word	0x40000400
 8003828:	40000800 	.word	0x40000800
 800382c:	40000c00 	.word	0x40000c00
 8003830:	40010400 	.word	0x40010400
 8003834:	40014000 	.word	0x40014000
 8003838:	40014400 	.word	0x40014400
 800383c:	40014800 	.word	0x40014800
 8003840:	40001800 	.word	0x40001800
 8003844:	40001c00 	.word	0x40001c00
 8003848:	40002000 	.word	0x40002000

0800384c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800384c:	b480      	push	{r7}
 800384e:	b087      	sub	sp, #28
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	f023 0201 	bic.w	r2, r3, #1
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f023 030a 	bic.w	r3, r3, #10
 8003888:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4313      	orrs	r3, r2
 8003890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	621a      	str	r2, [r3, #32]
}
 800389e:	bf00      	nop
 80038a0:	371c      	adds	r7, #28
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b087      	sub	sp, #28
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	60f8      	str	r0, [r7, #12]
 80038b2:	60b9      	str	r1, [r7, #8]
 80038b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	f023 0210 	bic.w	r2, r3, #16
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	031b      	lsls	r3, r3, #12
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4313      	orrs	r3, r2
 80038de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	011b      	lsls	r3, r3, #4
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	621a      	str	r2, [r3, #32]
}
 80038fe:	bf00      	nop
 8003900:	371c      	adds	r7, #28
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800390a:	b480      	push	{r7}
 800390c:	b085      	sub	sp, #20
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
 8003912:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003920:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4313      	orrs	r3, r2
 8003928:	f043 0307 	orr.w	r3, r3, #7
 800392c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	609a      	str	r2, [r3, #8]
}
 8003934:	bf00      	nop
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800395a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	021a      	lsls	r2, r3, #8
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	431a      	orrs	r2, r3
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4313      	orrs	r3, r2
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	4313      	orrs	r3, r2
 800396c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	609a      	str	r2, [r3, #8]
}
 8003974:	bf00      	nop
 8003976:	371c      	adds	r7, #28
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003994:	2302      	movs	r3, #2
 8003996:	e05a      	b.n	8003a4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a21      	ldr	r2, [pc, #132]	; (8003a5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d022      	beq.n	8003a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e4:	d01d      	beq.n	8003a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a1d      	ldr	r2, [pc, #116]	; (8003a60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d018      	beq.n	8003a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1b      	ldr	r2, [pc, #108]	; (8003a64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d013      	beq.n	8003a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a1a      	ldr	r2, [pc, #104]	; (8003a68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d00e      	beq.n	8003a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a18      	ldr	r2, [pc, #96]	; (8003a6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d009      	beq.n	8003a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a17      	ldr	r2, [pc, #92]	; (8003a70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d004      	beq.n	8003a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a15      	ldr	r2, [pc, #84]	; (8003a74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d10c      	bne.n	8003a3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40010000 	.word	0x40010000
 8003a60:	40000400 	.word	0x40000400
 8003a64:	40000800 	.word	0x40000800
 8003a68:	40000c00 	.word	0x40000c00
 8003a6c:	40010400 	.word	0x40010400
 8003a70:	40014000 	.word	0x40014000
 8003a74:	40001800 	.word	0x40001800

08003a78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e042      	b.n	8003b10 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fd fd2c 	bl	80014fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2224      	movs	r2, #36	; 0x24
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f82b 	bl	8003b18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	691a      	ldr	r2, [r3, #16]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ad0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695a      	ldr	r2, [r3, #20]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ae0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003af0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b1c:	b0c0      	sub	sp, #256	; 0x100
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b34:	68d9      	ldr	r1, [r3, #12]
 8003b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	ea40 0301 	orr.w	r3, r0, r1
 8003b40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	431a      	orrs	r2, r3
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b70:	f021 010c 	bic.w	r1, r1, #12
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b7e:	430b      	orrs	r3, r1
 8003b80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b92:	6999      	ldr	r1, [r3, #24]
 8003b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	ea40 0301 	orr.w	r3, r0, r1
 8003b9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	4b8f      	ldr	r3, [pc, #572]	; (8003de4 <UART_SetConfig+0x2cc>)
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d005      	beq.n	8003bb8 <UART_SetConfig+0xa0>
 8003bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	4b8d      	ldr	r3, [pc, #564]	; (8003de8 <UART_SetConfig+0x2d0>)
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d104      	bne.n	8003bc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bb8:	f7ff fc72 	bl	80034a0 <HAL_RCC_GetPCLK2Freq>
 8003bbc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003bc0:	e003      	b.n	8003bca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bc2:	f7ff fc59 	bl	8003478 <HAL_RCC_GetPCLK1Freq>
 8003bc6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bd4:	f040 810c 	bne.w	8003df0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003be2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003be6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003bea:	4622      	mov	r2, r4
 8003bec:	462b      	mov	r3, r5
 8003bee:	1891      	adds	r1, r2, r2
 8003bf0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003bf2:	415b      	adcs	r3, r3
 8003bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bf6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	eb12 0801 	adds.w	r8, r2, r1
 8003c00:	4629      	mov	r1, r5
 8003c02:	eb43 0901 	adc.w	r9, r3, r1
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	f04f 0300 	mov.w	r3, #0
 8003c0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c1a:	4690      	mov	r8, r2
 8003c1c:	4699      	mov	r9, r3
 8003c1e:	4623      	mov	r3, r4
 8003c20:	eb18 0303 	adds.w	r3, r8, r3
 8003c24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c28:	462b      	mov	r3, r5
 8003c2a:	eb49 0303 	adc.w	r3, r9, r3
 8003c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c46:	460b      	mov	r3, r1
 8003c48:	18db      	adds	r3, r3, r3
 8003c4a:	653b      	str	r3, [r7, #80]	; 0x50
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	eb42 0303 	adc.w	r3, r2, r3
 8003c52:	657b      	str	r3, [r7, #84]	; 0x54
 8003c54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c5c:	f7fc feaa 	bl	80009b4 <__aeabi_uldivmod>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4b61      	ldr	r3, [pc, #388]	; (8003dec <UART_SetConfig+0x2d4>)
 8003c66:	fba3 2302 	umull	r2, r3, r3, r2
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	011c      	lsls	r4, r3, #4
 8003c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c80:	4642      	mov	r2, r8
 8003c82:	464b      	mov	r3, r9
 8003c84:	1891      	adds	r1, r2, r2
 8003c86:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c88:	415b      	adcs	r3, r3
 8003c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c90:	4641      	mov	r1, r8
 8003c92:	eb12 0a01 	adds.w	sl, r2, r1
 8003c96:	4649      	mov	r1, r9
 8003c98:	eb43 0b01 	adc.w	fp, r3, r1
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ca8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cb0:	4692      	mov	sl, r2
 8003cb2:	469b      	mov	fp, r3
 8003cb4:	4643      	mov	r3, r8
 8003cb6:	eb1a 0303 	adds.w	r3, sl, r3
 8003cba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cbe:	464b      	mov	r3, r9
 8003cc0:	eb4b 0303 	adc.w	r3, fp, r3
 8003cc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cd4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003cd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	18db      	adds	r3, r3, r3
 8003ce0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	eb42 0303 	adc.w	r3, r2, r3
 8003ce8:	647b      	str	r3, [r7, #68]	; 0x44
 8003cea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003cf2:	f7fc fe5f 	bl	80009b4 <__aeabi_uldivmod>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	4b3b      	ldr	r3, [pc, #236]	; (8003dec <UART_SetConfig+0x2d4>)
 8003cfe:	fba3 2301 	umull	r2, r3, r3, r1
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	2264      	movs	r2, #100	; 0x64
 8003d06:	fb02 f303 	mul.w	r3, r2, r3
 8003d0a:	1acb      	subs	r3, r1, r3
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d12:	4b36      	ldr	r3, [pc, #216]	; (8003dec <UART_SetConfig+0x2d4>)
 8003d14:	fba3 2302 	umull	r2, r3, r3, r2
 8003d18:	095b      	lsrs	r3, r3, #5
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d20:	441c      	add	r4, r3
 8003d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d26:	2200      	movs	r2, #0
 8003d28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d34:	4642      	mov	r2, r8
 8003d36:	464b      	mov	r3, r9
 8003d38:	1891      	adds	r1, r2, r2
 8003d3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d3c:	415b      	adcs	r3, r3
 8003d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d44:	4641      	mov	r1, r8
 8003d46:	1851      	adds	r1, r2, r1
 8003d48:	6339      	str	r1, [r7, #48]	; 0x30
 8003d4a:	4649      	mov	r1, r9
 8003d4c:	414b      	adcs	r3, r1
 8003d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	f04f 0300 	mov.w	r3, #0
 8003d58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d5c:	4659      	mov	r1, fp
 8003d5e:	00cb      	lsls	r3, r1, #3
 8003d60:	4651      	mov	r1, sl
 8003d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d66:	4651      	mov	r1, sl
 8003d68:	00ca      	lsls	r2, r1, #3
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4603      	mov	r3, r0
 8003d70:	4642      	mov	r2, r8
 8003d72:	189b      	adds	r3, r3, r2
 8003d74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d78:	464b      	mov	r3, r9
 8003d7a:	460a      	mov	r2, r1
 8003d7c:	eb42 0303 	adc.w	r3, r2, r3
 8003d80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d98:	460b      	mov	r3, r1
 8003d9a:	18db      	adds	r3, r3, r3
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d9e:	4613      	mov	r3, r2
 8003da0:	eb42 0303 	adc.w	r3, r2, r3
 8003da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003da6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003daa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003dae:	f7fc fe01 	bl	80009b4 <__aeabi_uldivmod>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	4b0d      	ldr	r3, [pc, #52]	; (8003dec <UART_SetConfig+0x2d4>)
 8003db8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dbc:	095b      	lsrs	r3, r3, #5
 8003dbe:	2164      	movs	r1, #100	; 0x64
 8003dc0:	fb01 f303 	mul.w	r3, r1, r3
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	3332      	adds	r3, #50	; 0x32
 8003dca:	4a08      	ldr	r2, [pc, #32]	; (8003dec <UART_SetConfig+0x2d4>)
 8003dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd0:	095b      	lsrs	r3, r3, #5
 8003dd2:	f003 0207 	and.w	r2, r3, #7
 8003dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4422      	add	r2, r4
 8003dde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003de0:	e106      	b.n	8003ff0 <UART_SetConfig+0x4d8>
 8003de2:	bf00      	nop
 8003de4:	40011000 	.word	0x40011000
 8003de8:	40011400 	.word	0x40011400
 8003dec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003df4:	2200      	movs	r2, #0
 8003df6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003dfa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003dfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e02:	4642      	mov	r2, r8
 8003e04:	464b      	mov	r3, r9
 8003e06:	1891      	adds	r1, r2, r2
 8003e08:	6239      	str	r1, [r7, #32]
 8003e0a:	415b      	adcs	r3, r3
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e12:	4641      	mov	r1, r8
 8003e14:	1854      	adds	r4, r2, r1
 8003e16:	4649      	mov	r1, r9
 8003e18:	eb43 0501 	adc.w	r5, r3, r1
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	00eb      	lsls	r3, r5, #3
 8003e26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e2a:	00e2      	lsls	r2, r4, #3
 8003e2c:	4614      	mov	r4, r2
 8003e2e:	461d      	mov	r5, r3
 8003e30:	4643      	mov	r3, r8
 8003e32:	18e3      	adds	r3, r4, r3
 8003e34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e38:	464b      	mov	r3, r9
 8003e3a:	eb45 0303 	adc.w	r3, r5, r3
 8003e3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e5e:	4629      	mov	r1, r5
 8003e60:	008b      	lsls	r3, r1, #2
 8003e62:	4621      	mov	r1, r4
 8003e64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e68:	4621      	mov	r1, r4
 8003e6a:	008a      	lsls	r2, r1, #2
 8003e6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e70:	f7fc fda0 	bl	80009b4 <__aeabi_uldivmod>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4b60      	ldr	r3, [pc, #384]	; (8003ffc <UART_SetConfig+0x4e4>)
 8003e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	011c      	lsls	r4, r3, #4
 8003e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e86:	2200      	movs	r2, #0
 8003e88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e94:	4642      	mov	r2, r8
 8003e96:	464b      	mov	r3, r9
 8003e98:	1891      	adds	r1, r2, r2
 8003e9a:	61b9      	str	r1, [r7, #24]
 8003e9c:	415b      	adcs	r3, r3
 8003e9e:	61fb      	str	r3, [r7, #28]
 8003ea0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ea4:	4641      	mov	r1, r8
 8003ea6:	1851      	adds	r1, r2, r1
 8003ea8:	6139      	str	r1, [r7, #16]
 8003eaa:	4649      	mov	r1, r9
 8003eac:	414b      	adcs	r3, r1
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ebc:	4659      	mov	r1, fp
 8003ebe:	00cb      	lsls	r3, r1, #3
 8003ec0:	4651      	mov	r1, sl
 8003ec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ec6:	4651      	mov	r1, sl
 8003ec8:	00ca      	lsls	r2, r1, #3
 8003eca:	4610      	mov	r0, r2
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4603      	mov	r3, r0
 8003ed0:	4642      	mov	r2, r8
 8003ed2:	189b      	adds	r3, r3, r2
 8003ed4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ed8:	464b      	mov	r3, r9
 8003eda:	460a      	mov	r2, r1
 8003edc:	eb42 0303 	adc.w	r3, r2, r3
 8003ee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	67bb      	str	r3, [r7, #120]	; 0x78
 8003eee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	f04f 0300 	mov.w	r3, #0
 8003ef8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003efc:	4649      	mov	r1, r9
 8003efe:	008b      	lsls	r3, r1, #2
 8003f00:	4641      	mov	r1, r8
 8003f02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f06:	4641      	mov	r1, r8
 8003f08:	008a      	lsls	r2, r1, #2
 8003f0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f0e:	f7fc fd51 	bl	80009b4 <__aeabi_uldivmod>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4611      	mov	r1, r2
 8003f18:	4b38      	ldr	r3, [pc, #224]	; (8003ffc <UART_SetConfig+0x4e4>)
 8003f1a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	2264      	movs	r2, #100	; 0x64
 8003f22:	fb02 f303 	mul.w	r3, r2, r3
 8003f26:	1acb      	subs	r3, r1, r3
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	3332      	adds	r3, #50	; 0x32
 8003f2c:	4a33      	ldr	r2, [pc, #204]	; (8003ffc <UART_SetConfig+0x4e4>)
 8003f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f32:	095b      	lsrs	r3, r3, #5
 8003f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f38:	441c      	add	r4, r3
 8003f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f3e:	2200      	movs	r2, #0
 8003f40:	673b      	str	r3, [r7, #112]	; 0x70
 8003f42:	677a      	str	r2, [r7, #116]	; 0x74
 8003f44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f48:	4642      	mov	r2, r8
 8003f4a:	464b      	mov	r3, r9
 8003f4c:	1891      	adds	r1, r2, r2
 8003f4e:	60b9      	str	r1, [r7, #8]
 8003f50:	415b      	adcs	r3, r3
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f58:	4641      	mov	r1, r8
 8003f5a:	1851      	adds	r1, r2, r1
 8003f5c:	6039      	str	r1, [r7, #0]
 8003f5e:	4649      	mov	r1, r9
 8003f60:	414b      	adcs	r3, r1
 8003f62:	607b      	str	r3, [r7, #4]
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	f04f 0300 	mov.w	r3, #0
 8003f6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f70:	4659      	mov	r1, fp
 8003f72:	00cb      	lsls	r3, r1, #3
 8003f74:	4651      	mov	r1, sl
 8003f76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f7a:	4651      	mov	r1, sl
 8003f7c:	00ca      	lsls	r2, r1, #3
 8003f7e:	4610      	mov	r0, r2
 8003f80:	4619      	mov	r1, r3
 8003f82:	4603      	mov	r3, r0
 8003f84:	4642      	mov	r2, r8
 8003f86:	189b      	adds	r3, r3, r2
 8003f88:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f8a:	464b      	mov	r3, r9
 8003f8c:	460a      	mov	r2, r1
 8003f8e:	eb42 0303 	adc.w	r3, r2, r3
 8003f92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	663b      	str	r3, [r7, #96]	; 0x60
 8003f9e:	667a      	str	r2, [r7, #100]	; 0x64
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003fac:	4649      	mov	r1, r9
 8003fae:	008b      	lsls	r3, r1, #2
 8003fb0:	4641      	mov	r1, r8
 8003fb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fb6:	4641      	mov	r1, r8
 8003fb8:	008a      	lsls	r2, r1, #2
 8003fba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003fbe:	f7fc fcf9 	bl	80009b4 <__aeabi_uldivmod>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4b0d      	ldr	r3, [pc, #52]	; (8003ffc <UART_SetConfig+0x4e4>)
 8003fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fcc:	095b      	lsrs	r3, r3, #5
 8003fce:	2164      	movs	r1, #100	; 0x64
 8003fd0:	fb01 f303 	mul.w	r3, r1, r3
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	3332      	adds	r3, #50	; 0x32
 8003fda:	4a08      	ldr	r2, [pc, #32]	; (8003ffc <UART_SetConfig+0x4e4>)
 8003fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe0:	095b      	lsrs	r3, r3, #5
 8003fe2:	f003 020f 	and.w	r2, r3, #15
 8003fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4422      	add	r2, r4
 8003fee:	609a      	str	r2, [r3, #8]
}
 8003ff0:	bf00      	nop
 8003ff2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ffc:	51eb851f 	.word	0x51eb851f

08004000 <memset>:
 8004000:	4402      	add	r2, r0
 8004002:	4603      	mov	r3, r0
 8004004:	4293      	cmp	r3, r2
 8004006:	d100      	bne.n	800400a <memset+0xa>
 8004008:	4770      	bx	lr
 800400a:	f803 1b01 	strb.w	r1, [r3], #1
 800400e:	e7f9      	b.n	8004004 <memset+0x4>

08004010 <__libc_init_array>:
 8004010:	b570      	push	{r4, r5, r6, lr}
 8004012:	4d0d      	ldr	r5, [pc, #52]	; (8004048 <__libc_init_array+0x38>)
 8004014:	4c0d      	ldr	r4, [pc, #52]	; (800404c <__libc_init_array+0x3c>)
 8004016:	1b64      	subs	r4, r4, r5
 8004018:	10a4      	asrs	r4, r4, #2
 800401a:	2600      	movs	r6, #0
 800401c:	42a6      	cmp	r6, r4
 800401e:	d109      	bne.n	8004034 <__libc_init_array+0x24>
 8004020:	4d0b      	ldr	r5, [pc, #44]	; (8004050 <__libc_init_array+0x40>)
 8004022:	4c0c      	ldr	r4, [pc, #48]	; (8004054 <__libc_init_array+0x44>)
 8004024:	f000 f818 	bl	8004058 <_init>
 8004028:	1b64      	subs	r4, r4, r5
 800402a:	10a4      	asrs	r4, r4, #2
 800402c:	2600      	movs	r6, #0
 800402e:	42a6      	cmp	r6, r4
 8004030:	d105      	bne.n	800403e <__libc_init_array+0x2e>
 8004032:	bd70      	pop	{r4, r5, r6, pc}
 8004034:	f855 3b04 	ldr.w	r3, [r5], #4
 8004038:	4798      	blx	r3
 800403a:	3601      	adds	r6, #1
 800403c:	e7ee      	b.n	800401c <__libc_init_array+0xc>
 800403e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004042:	4798      	blx	r3
 8004044:	3601      	adds	r6, #1
 8004046:	e7f2      	b.n	800402e <__libc_init_array+0x1e>
 8004048:	08004098 	.word	0x08004098
 800404c:	08004098 	.word	0x08004098
 8004050:	08004098 	.word	0x08004098
 8004054:	0800409c 	.word	0x0800409c

08004058 <_init>:
 8004058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405a:	bf00      	nop
 800405c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800405e:	bc08      	pop	{r3}
 8004060:	469e      	mov	lr, r3
 8004062:	4770      	bx	lr

08004064 <_fini>:
 8004064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004066:	bf00      	nop
 8004068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800406a:	bc08      	pop	{r3}
 800406c:	469e      	mov	lr, r3
 800406e:	4770      	bx	lr
